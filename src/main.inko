import openflow.config (Config)
import openflow.http (Client)
import openflow.hue (Hue)
import openflow.inputs.co2 (Input as Co2Input, Sensor as Co2Sensor)
import openflow.inputs.humidity (
  Input as HumidityInput, Sensor as HumiditySensor,
)
import openflow.inputs.motion (Input as MotionInput, Sensor as MotionSensor)
import openflow.inputs.remote (Button, Input as RemoteInput)
import openflow.itho (Itho)
import openflow.logger (Logger)
import openflow.metrics (Metrics)
import openflow.more_sense (MoreSense)
import openflow.state (Room, State)
import std.env
import std.optparse (Help, Options)
import std.process (sleep)
import std.stdio (Stderr, Stdout)
import std.sync (Future)
import std.sys (exit)
import std.time (Duration)

let DEFAULT_CONFIG = '/etc/openflow.json'

class async Main {
  fn async main {
    let opts = Options.new

    opts.flag('h', 'help', 'Show this help message')
    opts.single(
      'c',
      'config',
      'PATH',
      'The configuration file to use (default: ${DEFAULT_CONFIG})',
    )

    let matches = match opts.parse(env.arguments) {
      case Ok(matches) -> matches
      case Error(err) -> {
        Stderr.new.print('openflow failed to start: ${err}')
        exit(1)
      }
    }

    if matches.contains?('help') {
      let help = Help
        .new('openflow')
        .section('Examples')
        .line(
          'openflow                      # Start using the default configuration file',
        )
        .line(
          'openflow --config config.json # Use ./config.json as the configuration file',
        )
        .section('Options')
        .options(opts)
        .to_string

      Stdout.new.write_string(help)
      return
    }

    run(matches.value('config').or(DEFAULT_CONFIG))
  }

  fn run(config_path: String) {
    let logger = Logger.default
    let config = match Config.load(config_path.to_path) {
      case Ok(conf) -> conf
      case Error(err) -> panic('failed to load ${config_path}: ${err}')
    }

    let metrics = recover {
      Metrics.new(config.metrics.ip.clone, config.metrics.port)
    }

    let state = State.new(
      recover Itho.new(Client.new(config.itho.ip.clone)),
      logger,
      recover metrics.clone,
      config.itho,
    )

    state.prepare

    let co2_input = Co2Input.new(state, logger, recover metrics.clone)
    let motion_input = MotionInput.new(
      state,
      logger,
      recover metrics.clone,
      recover Hue.new(Client.new(config.hue.ip.clone), config.hue.user),
    )

    let humid_input = HumidityInput.new(
      state,
      logger,
      metrics,
      recover Itho.new(Client.new(config.itho.ip.clone)),
      config.humidity,
    )

    config.rooms.iter.each(fn (conf) {
      let name = conf.name

      match conf.co2 {
        case Some(ip) -> {
          let sensor = recover {
            Co2Sensor.new(name, MoreSense.new(Client.new(ip.clone)))
          }

          match conf.co2_minimum {
            case Some(val) -> sensor.co2_minimum = val
            case _ -> {}
          }

          co2_input.add_sensor(sensor)
        }
        case _ -> {}
      }

      match conf.motion {
        case Some(id) -> {
          motion_input.add_sensor(recover MotionSensor.new(name, id))
        }
        case _ -> {}
      }

      match conf.humidity {
        case Some(id) -> {
          humid_input.add_sensor(recover HumiditySensor.new(name, id))
        }
        case _ -> {}
      }

      state.add_room(Room.new(name, conf))
    })

    match config.remote {
      case Some(remote) -> {
        let itho = recover Itho.new(Client.new(config.itho.ip.clone))
        let input = RemoteInput.new(state, logger, itho, remote.id)

        remote.buttons.iter.each(fn (cfg) {
          input.add_button(
            cfg.name,
            recover Button.new(cfg.rooms.clone, cfg.duration.clone),
          )
        })

        input.run
      }
      case _ -> {}
    }

    co2_input.run
    motion_input.run
    humid_input.run

    loop {
      match Future.new {
        case (future, promise) -> {
          state.apply(promise)
          future.get
        }
      }

      sleep(Duration.from_secs(60))
    }
  }
}
