import openflow::clock::SystemClock
import openflow::config::Config
import openflow::controller::Controller
import openflow::http::Client
import openflow::hue::Hue
import openflow::itho::Itho
import std::env
import std::process::(sleep)
import std::time::Duration

# The amount of time (in seconds) to wait between iterations of the main work
# loop.
let INTERVAL = 5

class async Main {
  fn async main {
    let conf_path = env.get('OPENFLOW_CONFIG').unwrap_or('config.json')
    let conf = try! Config.load(conf_path)
    let itho = Itho.new(Client.new(conf.itho_wifi_address.clone))
    let hue = Hue.new(Client.new(conf.hue_address.clone), user: conf.hue_user)
    let clock = SystemClock.new
    let ctl = Controller.new(conf, itho, hue, clock)
    let interval = Duration.from_secs(INTERVAL)

    ctl.prepare

    loop {
      ctl.iteration
      sleep(interval)
    }
  }
}
