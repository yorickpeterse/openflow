import openflow::histogram::Histogram
import std::time::(Duration, Instant)

# The lower bound of the histogram. All values up to this value are tracked in
# the first bucket.
let LOW = 500

# The upper bound of the histogram. All values above this value are tracked in
# the last bucket.
let HIGH = 1200

# The size/ppm per bucket.
let pub SIZE = 50

# The number of buckets to use for the CO2 histogram.
let BUCKETS = 15

# The last/maximum bucket.
let MAX_BUCKET = BUCKETS - 1

# A type for tracking the estimated CO2 levels over time, while taking into
# account sporadic/temporary changes in the reported value.
class pub Co2 {
  # The histogram used to keep track of how many times certain CO2 levels are
  # reported.
  let @histogram: Histogram

  # The current estimated CO2 level in parts-per-million (ppm).
  let @value: Int

  fn pub static new -> Co2 {
    Co2 {
      @histogram = Histogram.new(BUCKETS),
      @value = 0,
    }
  }

  # Returns the current CO2 estimate.
  fn pub value -> Int {
    @value
  }

  # Updates the CO2 estimate if necessary.
  fn pub mut update {
    @value = LOW + (@histogram.largest * SIZE)
    @histogram.reset
  }

  # Adds the given PPM to the list of samples.
  fn pub mut add(co2: Int) {
    let bucket = if co2 <= LOW {
      0
    } else if co2 <= HIGH {
      # Values such as 740 are rounded down to 700, while values such as 760 are
      # rounded up to 800. This ensures CO2 values are assigned to more accurate
      # buckets, instead of always being assigned to the lower bucket (as
      # integer division rounds down).
      (co2 - LOW) + (SIZE - 1 / 2) / SIZE
    } else {
      MAX_BUCKET
    }

    @histogram.increment(bucket)
  }
}
