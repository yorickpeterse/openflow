import std::fs::file::ReadOnlyFile
import std::fs::path::IntoPath
import std::json::(self, Json)
import std::net::ip::IpAddress
import std::time::Duration

# The default flow in m3/hour in case a room doesn't specify a custom flow.
let DEFAULT_FLOW = 15

fn array(object: mut Map[String, Json], key: String) !! String -> Array[Json] {
  match object.remove(key) {
    case Some(Array(v)) -> v
    case _ -> throw "The '{key}' value must be an array"
  }
}

fn int(object: mut Map[String, Json], key: String) !! String -> Int {
  match object.remove(key) {
    case Some(Int(v)) -> v
    case _ -> throw "The '{key}' value must be an integer"
  }
}

fn string(object: mut Map[String, Json], key: String) !! String -> String {
  match object.remove(key) {
    case Some(String(v)) -> v
    case _ -> throw "The '{key}' value must be a string"
  }
}

fn ip(object: mut Map[String, Json], key: String) !! String -> uni IpAddress {
  match object.remove(key) {
    case Some(String(v)) -> recover match IpAddress.parse(v) {
      case Some(addr) -> return addr
      case _ -> {}
    }
    case _ -> {}
  }

  throw "The '{key}' value must be a valid IP address"
}

# Configuration details of a single room, such as the name and the motion
# sensor.
class pub Room {
  # The human-friendly name of the room.
  let pub @name: String

  # The setting index used to control the exhaust in a room.
  let pub @exhaust: Int

  # A flag indicating that this room should be ventilated at night, regardless
  # of the state of any sensors.
  let pub @night: Bool

  # The ID of the motion sensor attached to this room.
  let pub @motion: Option[Int]

  # The ID of the temperature sensor attached to this room.
  let pub @temperature: Option[Int]

  # The name of the Itho humidity sensor attached to this room.
  let pub @humidity: Option[String]

  # Any IPs to ping to determine if a room should be ventilated.
  let pub @ping: Array[IpAddress]

  # The desired flow rate in h3/hour.
  let pub @flow: Int

  fn pub static from_json(value: Map[String, Json]) !! String -> Room {
    let name = try string(value, 'name')
    let exhaust = try int(value, 'exhaust')
    let night = match value.get('night') {
      case Some(Bool(val)) -> val
      case _ -> false
    }

    let motion = match value.remove('motion') {
      case Some(Int(val)) -> Option.Some(val)
      case _ -> Option.None
    }

    let temperature = match value.remove('temperature') {
      case Some(Int(val)) -> Option.Some(val)
      case _ -> Option.None
    }

    let humidity = match value.remove('humidity') {
      case Some(String(val)) -> Option.Some(val)
      case _ -> Option.None
    }

    let flow = match value.remove('flow') {
      case Some(Int(val)) -> val
      case _ -> DEFAULT_FLOW
    }

    let ping = match value.remove('ping') {
      case Some(Array(vals)) -> {
        vals
          .into_iter
          .select_map fn (val) {
            match val {
              case String(val) -> IpAddress.parse(val)
              case _ -> Option.None
            }
          }
          .to_array
      }
      case _ -> []
    }

    Room {
      @name = name,
      @night = night,
      @exhaust = exhaust,
      @motion = motion,
      @temperature = temperature,
      @humidity = humidity
      @ping = ping,
      @flow = flow,
    }
  }
}

# Configuration details for the humidity sensors.
class pub Humidity {
  # The high threshold.
  #
  # When humidity levels exceed this value, the room is deemed too humid.
  let pub @high: Int

  # The low threshold.
  #
  # When humidity levels drop below this value, the room is deemed dry enough.
  let pub @low: Int

  # The amount of time to wait after the high threshold is exceeded, before
  # ventilating a room.
  let pub @high_time: Duration

  # The amount of time to wait after the low threshold is reached, before
  # turning ventilation back to normal.
  let pub @low_time: Duration

  fn pub static from_json(value: Map[String, Json]) !! String -> Humidity {
    let low = try int(value, 'low')
    let high = try int(value, 'high')
    let low_time = Duration.from_secs(try int(value, 'low_time'))
    let high_time = Duration.from_secs(try int(value, 'high_time'))

    Humidity {
      @low = low,
      @high = high,
      @low_time = low_time,
      @high_time = high_time,
    }
  }
}

# Various configuration settings, such as the settings to control the
# ventilation and the room-specific settings.
class pub Config {
  # Rooms to ventilate.
  let pub @rooms: Array[Room]

  # The setting used to turn on manual control of the DemandFlow device.
  let pub @manual_control: Int

  # The setting used to control the exhaust speed of the DemandFlow/HRU device.
  let pub @exhaust_speed: Int

  # The IP address of the Ith WiFi add-on API.
  let pub @itho_wifi_address: uni IpAddress

  # The IP address of the Philips Hue bridge API.
  let pub @hue_address: uni IpAddress

  # The username/key for the Philips Hue API.
  let pub @hue_user: String

  # The maximum flow rate in m3/hour that the exhaust supports.
  let pub @max_flow: Int

  # The humidity sensor settings.
  let pub @humidity: Humidity

  fn pub static load(path: IntoPath) !! String -> Config {
    let file = try {
      ReadOnlyFile.new(path)
    } else (err) {
      throw "Failed to load the configuration file: {err}"
    }

    let bytes = ByteArray.new

    try file.read_all(bytes) else (e) throw e.to_string

    let doc = try {
      json.parse(bytes.into_string)
    } else (err) {
      throw "Failed to parse the configuration file: {err}"
    }

    let root = match doc {
      case Object(v) -> v
      case _ -> throw 'The top-level JSON value must be an object'
    }

    let rooms = []
    let rooms_iter = try { array(root, 'rooms') }.into_iter

    loop {
      match rooms_iter.next {
        case Some(Object(map)) -> rooms.push(try Room.from_json(map))
        case Some(_) -> throw "The 'rooms' setting can only contain objects"
        case None -> break
      }
    }

    let humidity = match root.remove('humidity') {
      case Some(Object(map)) -> try Humidity.from_json(map),
      case _ -> throw 'The "humidity" object is required'
    }

    Config {
      @rooms = rooms,
      @manual_control = try int(root, 'manual_control'),
      @exhaust_speed = try int(root, 'exhaust_speed'),
      @itho_wifi_address = try ip(root, 'itho_api'),
      @hue_address = try ip(root, 'hue_api'),
      @hue_user = try string(root, 'hue_user'),
      @max_flow = try int(root, 'max_flow'),
      @humidity = humidity,
    }
  }
}
