import std.fs.file (ReadOnlyFile)
import std.fs.path (Path)
import std.json (Json)
import std.net.ip (IpAddress)
import std.time (Duration)

fn opt_int(object: ref Map[String, Json], key: String) -> Option[Int] {
  match object.opt(key) {
    case Some(Int(v)) -> Option.Some(v)
    case _ -> Option.None
  }
}

fn opt_string(object: ref Map[String, Json], key: String) -> Option[String] {
  match object.opt(key) {
    case Some(String(v)) -> Option.Some(v)
    case _ -> Option.None
  }
}

fn string(
  object: ref Map[String, Json],
  key: String,
) -> Result[String, String] {
  match object.opt(key) {
    case Some(String(v)) -> Result.Ok(v)
    case _ -> throw 'The "${key}" value must be a string'
  }
}

fn int(object: ref Map[String, Json], key: String) -> Result[Int, String] {
  match object.opt(key) {
    case Some(Int(v)) -> Result.Ok(v)
    case _ -> throw 'The "${key}" value must be an integer'
  }
}

fn int_opt(object: ref Map[String, Json], key: String) -> Option[Int] {
  match object.opt(key) {
    case Some(Int(v)) -> Option.Some(v)
    case _ -> Option.None
  }
}

fn float(object: ref Map[String, Json], key: String) -> Result[Float, String] {
  match object.opt(key) {
    case Some(Float(v)) -> Result.Ok(v)
    case _ -> throw 'The "${key}" value must be a float'
  }
}

fn opt_ip(
  object: ref Map[String, Json],
  key: String,
) -> Result[Option[IpAddress], String] {
  let res = match object.opt(key) {
    case Some(String(str)) -> {
      Option.Some(
        match IpAddress.parse(str) {
          case Some(ip) -> ip
          case _ -> throw 'The key "${key}" must be a valid IP address'
        },
      )
    }
    case _ -> Option.None
  }

  Result.Ok(res)
}

fn ip(object: ref Map[String, Json], key: String) -> Result[IpAddress, String] {
  match object.opt(key) {
    case Some(String(str)) -> {
      match IpAddress.parse(str) {
        case Some(ip) -> return Result.Ok(ip)
        case _ -> {}
      }
    }
    case _ -> {}
  }

  throw 'The key "${key}" must be a valid IP address'
}

# Configuration details for the air flow of a room.
class pub Flow {
  # The value to multiply the flow by to obtain the true air flow.
  #
  # Given a configured air flow of X m3/h, the actual air flow may end up lower
  # due to the distance from the exhaust to the ventilation system, the amount
  # of corners the duct has to take, the material of the duct, etc.
  #
  # This value is multiplied with the flow to correct for such variables.
  # Obtaining these values is done as follows:
  #
  # 1. Set the ventilation system to a fixed exhaust speed.
  # 2. Close all exhausts, except the one you want to measure.
  # 3. Using an anemometer, measure the amount of air flowing through the
  #    exhaust (in m3/h).
  # 4. Do this for all the exhausts.
  # 5. Take the maximum value across the exhausts, then for each exhaust/room
  #    derive this value using the formula `1 + (1 - (flow / max))`, then round
  #    it up slightly (e.g. to the nearest multiple of 0.05) to account for
  #    measurement errors.
  let pub @correction: Float

  # The minimum air flow for active ventilation in m3/h.
  let pub @minimum: Int

  # The maximum air flow in m3/h.
  let pub @maximum: Int

  # The default air flow in m3/h.
  let pub @default: Int

  # The air flow in m3/h for the "low" setting.
  let pub @low: Int

  # The air flow in m3/h for the "medium" setting.
  let pub @medium: Int

  # The air flow in m3/h for the "medium high" setting.
  let pub @medium_high: Int

  # The air flow in m3/h for the "high" setting.
  let pub @high: Int

  # The air flow in m3/h to apply when enabling ventilation in response to a
  # button.
  let pub @button: Int

  fn pub static from_json(
    object: ref Map[String, Json],
  ) -> Result[Flow, String] {
    let correct = try float(object, 'correction')
    let min = try int(object, 'minimum')
    let max = try int(object, 'maximum')
    let def = try int(object, 'default')
    let low = try int(object, 'low')
    let med = try int(object, 'medium')
    let med_high = try int(object, 'medium_high')
    let high = try int(object, 'high')
    let button = opt_int(object, 'button').or(max)

    Result.Ok(
      Flow(
        correction: correct,
        minimum: min,
        maximum: max,
        default: def,
        low: low,
        medium: med,
        medium_high: med_high,
        high: high,
        button: button,
      ),
    )
  }
}

# Configuration details for a single room.
class pub Room {
  # The unique name of the room.
  let pub @name: String

  # The setting ID of the exhaust for this room.
  let pub @exhaust: Int

  # The air flow configuration for this room.
  let pub @flow: Flow

  # The ID of the motion sensor associated with this room.
  let pub @motion: Option[Int]

  # The name of the humidity sensor associated with this room.
  let pub @humidity: Option[String]

  # The IP address of a MoreSense CO2 sensor associated with this room.
  let pub @co2: Option[IpAddress]

  # The minimum CO2 value to observe before enabling active ventilation.
  let pub @co2_minimum: Option[Int]

  fn pub static from_json(
    name: String,
    object: ref Map[String, Json],
  ) -> Result[Room, String] {
    let exhaust = try int(object, 'exhaust')
    let flow = match object.opt('flow') {
      case Some(Object(map)) -> try Flow.from_json(map)
      case _ -> throw 'The "flow" key must be an object'
    }

    let motion = opt_int(object, 'motion')
    let humidity = opt_string(object, 'humidity')
    let co2 = try opt_ip(object, 'co2')
    let co2_min = opt_int(object, 'co2_minimum')

    Result.Ok(
      Room(
        name: name,
        flow: flow,
        exhaust: exhaust,
        motion: motion,
        humidity: humidity,
        co2: co2,
        co2_minimum: co2_min,
      ),
    )
  }
}

# Configuration details for the Itho ventilation unit.
class pub Itho {
  # The IP address of the Itho WiFi module.
  let pub @ip: IpAddress

  # The ID of the setting that controls the manual mode.
  let pub @manual_id: Int

  # The ID of the setting that controls the ventilation speed.
  let pub @speed_id: Int

  # The minimum air flow to always apply.
  let pub @minimum_flow: Int

  # The maximum air flow supported by the unit.
  let pub @maximum_flow: Int

  # The amount of time to wait for the valves to adjust their setting.
  let pub @adjust_time: Int

  fn pub static from_json(
    object: ref Map[String, Json],
  ) -> Result[Itho, String] {
    let ip = try ip(object, 'ip')
    let manual = try int(object, 'manual_id')
    let speed = try int(object, 'speed_id')
    let min = try int(object, 'minimum_flow')
    let max = try int(object, 'maximum_flow')
    let adjust_time = int_opt(object, 'adjust_time').or(5)

    Result.Ok(
      Itho(
        ip: ip,
        manual_id: manual,
        speed_id: speed,
        minimum_flow: min,
        maximum_flow: max,
        adjust_time: adjust_time,
      ),
    )
  }
}

# Configuration details for the metrics database
class pub Metrics {
  # The IP address to connect to.
  let pub @ip: IpAddress

  # The port number of the server.
  let pub @port: Int

  fn pub static from_json(
    object: ref Map[String, Json],
  ) -> Result[Metrics, String] {
    let ip = try ip(object, 'ip')
    let port = try int(object, 'port')

    Result.Ok(Metrics(ip: ip, port: port))
  }
}

# Configuration details for the Hue API
class pub Hue {
  # The IP address to connect to.
  let pub @ip: IpAddress

  # The user/API token to use.
  let pub @user: String

  fn pub static from_json(
    object: ref Map[String, Json],
  ) -> Result[Hue, String] {
    let ip = try ip(object, 'ip')
    let user = try string(object, 'user')

    Result.Ok(Hue(ip: ip, user: user))
  }
}

# Configuration settings for the humidity sensors.
class pub Humidity {
  # The threshold at which to start ventilating at maximum speed.
  let pub @high: Int

  # The threshold at which to return to normal ventilation.
  let pub @low: Int

  # If humidity increases by this value then ventilation is enabled, regardless
  # of the absolute value.
  let pub @max_increase: Int

  # The value to add to the raw sensor values to obtain the correct value.
  #
  # The Itho humidity sensors appear to not be entirely accurate, sometimes
  # reporting values 5-10% higher than reality. This value can be used to
  # correct for such inaccuracies.
  let pub @correction: Int

  fn pub static from_json(
    object: ref Map[String, Json],
  ) -> Result[Humidity, String] {
    let high = try int(object, 'high')
    let low = try int(object, 'low')
    let max_increase = opt_int(object, 'max_increase').or(15)
    let correct = opt_int(object, 'correction').or(-5)

    Result.Ok(
      Humidity(
        high: high,
        low: low,
        max_increase: max_increase,
        correction: correct,
      ),
    )
  }
}

# Configuration details for a single button.
class pub Button {
  # The name of the button state.
  let pub @name: String

  # The rooms to ventilate.
  let pub @rooms: Array[String]

  # The time to ventilate the room for.
  let pub @duration: Duration

  fn pub static from_json(
    name: String,
    object: ref Map[String, Json],
  ) -> Result[Button, String] {
    let rooms = match object.opt('rooms') {
      case Some(Array(vals)) -> {
        let iter = vals.iter.map(fn (val) {
          match val {
            case String(v) -> Result.Ok(v)
            case _ -> {
              Result.Error('each value in the "rooms" key must be a string')
            }
          }
        })

        try Result.collect(iter)
      }
      case _ -> throw 'the "rooms" key must be an array'
    }

    let duration = Duration.from_secs(try int(object, 'duration'))

    Result.Ok(Button(name: name, rooms: rooms, duration: duration))
  }
}

# Configuration details for the RF remote.
class pub Remote {
  # The ID/name of the remote as used in the API.
  let pub @id: String

  # The button states and their rooms to ventilate.
  let pub @buttons: Array[Button]

  fn pub static from_json(
    object: ref Map[String, Json],
  ) -> Result[Remote, String] {
    let id = try string(object, 'id')
    let buttons = match object.opt('buttons') {
      case Some(Object(map)) -> {
        let iter = map.iter.map(fn (entry) {
          match entry.value {
            case Object(val) -> Button.from_json(entry.key, val)
            case _ -> Result.Error('each button must be a JSON object')
          }
        })

        try Result.collect(iter)
      }
      case _ -> throw 'the "buttons" key must be an object'
    }

    Result.Ok(Remote(id: id, buttons: buttons))
  }
}

# All configuration details.
class pub Config {
  # The configuration details for each room to ventilate.
  let pub @rooms: Array[Room]

  # The configuration details for the Itho ventilation unit.
  let pub @itho: Itho

  # The configuration details for the metrics database.
  let pub @metrics: Metrics

  # The configuration details for the Hue API.
  let pub @hue: Hue

  # The configuration details for the humidity sensors.
  let pub @humidity: Humidity

  # The configuration details for the RF remote.
  let pub @remote: Option[Remote]

  # Load configuration from a JSON file.
  fn pub static load(path: Path) -> Result[Config, String] {
    let file = try ReadOnlyFile.new(path).map_error(fn (e) { e.to_string })
    let bytes = ByteArray.new

    try file.read_all(bytes).map_error(fn (e) { e.to_string })

    let doc = try Json.parse(bytes.into_string).map_error(fn (e) { e.to_string })
    let root = match doc {
      case Object(v) -> v
      case _ -> throw 'the top-level JSON value must be an object'
    }

    let rooms = match root.opt('rooms') {
      case Some(Object(map)) -> {
        let iter = map.iter.map(fn (entry) {
          let name = entry.key

          match entry.value {
            case Object(map) -> Room.from_json(name, map)
            case _ -> Result.Error('The "${name}" key must be an object')
          }
        })

        try Result.collect(iter)
      }
      case _ -> throw 'the "rooms" key must be an array of objects'
    }

    let itho = match root.opt('itho') {
      case Some(Object(map)) -> try Itho.from_json(map)
      case _ -> throw 'the "itho" key must be an object'
    }

    let metrics = match root.opt('metrics') {
      case Some(Object(map)) -> try Metrics.from_json(map)
      case _ -> throw 'the "metrics" key must be an object'
    }

    let hue = match root.opt('hue') {
      case Some(Object(map)) -> try Hue.from_json(map)
      case _ -> throw 'the "hue" key must be an object'
    }

    let humidity = match root.opt('humidity') {
      case Some(Object(map)) -> try Humidity.from_json(map)
      case _ -> throw 'the "humidity" key must be an object'
    }

    let remote = match root.opt('remote') {
      case Some(Object(map)) -> Option.Some(try Remote.from_json(map))
      case None -> Option.None
      case _ -> throw 'the "remote" key must be an object'
    }

    Result.Ok(
      Config(
        rooms: rooms,
        itho: itho,
        metrics: metrics,
        hue: hue,
        humidity: humidity,
        remote: remote,
      ),
    )
  }
}
