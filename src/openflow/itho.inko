import openflow.http (Client, Error, Request, Response, retry)
import std.clone (Clone)
import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.int (ToInt)
import std.io (Buffer)
import std.json (Json)
import std.string (ToString)
import std.time (Duration)

# The path to the API endpoint.
let PATH = '/api.html'

# The time after which a request times out, excluding retries.
let TIMEOUT = 60

# A type describing the status of an RF remote.
type pub copy enum RemoteStatus {
  case Unknown
  case Low
  case High
  case Cook30
  case Cook60
  case Timer1
  case Timer2
  case Timer3

  fn pub name -> String {
    match self {
      case Unknown -> 'unknown'
      case Low -> 'low'
      case High -> 'high'
      case Cook30 -> 'cook30'
      case Cook60 -> 'cook60'
      case Timer1 -> 'timer1'
      case Timer2 -> 'timer2'
      case Timer3 -> 'timer3'
    }
  }
}

impl Equal[ref RemoteStatus] for RemoteStatus {
  fn pub ==(other: ref RemoteStatus) -> Bool {
    match (self, other) {
      case (Unknown, Unknown) -> true
      case (Low, Low) -> true
      case (High, High) -> true
      case (Cook30, Cook30) -> true
      case (Cook60, Cook60) -> true
      case (Timer1, Timer1) -> true
      case (Timer2, Timer2) -> true
      case (Timer3, Timer3) -> true
      case _ -> false
    }
  }
}

impl ToString for RemoteStatus {
  fn pub to_string -> String {
    match self {
      case Unknown -> 'Unknown'
      case Low -> 'Low'
      case High -> 'High'
      case Cook30 -> 'Cook30'
      case Cook60 -> 'Cook60'
      case Timer1 -> 'Timer1'
      case Timer2 -> 'Timer2'
      case Timer3 -> 'Timer3'
    }
  }
}

impl Format for RemoteStatus {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write(to_string)
  }
}

impl Clone[RemoteStatus] for RemoteStatus {
  fn pub clone -> RemoteStatus {
    match self {
      case Unknown -> RemoteStatus.Unknown
      case Low -> RemoteStatus.Low
      case High -> RemoteStatus.High
      case Cook30 -> RemoteStatus.Cook30
      case Cook60 -> RemoteStatus.Cook60
      case Timer1 -> RemoteStatus.Timer1
      case Timer2 -> RemoteStatus.Timer2
      case Timer3 -> RemoteStatus.Timer3
    }
  }
}

type pub copy Remote {
  # The current status of the remote.
  let pub @status: RemoteStatus

  # The time at which the command was received.
  let pub @timestamp: Int
}

# A type containing various statistics reported by the Itho WiFi module, such as
# the CO2 levels and the humidity.
type pub inline Status {
  # The CO2 concentration in the plenum.
  let pub @co2: Int

  # The speed of the exhaust fan, as a percentage between 0 and 100.
  let pub @exhaust_speed: Int

  # The humidity levels for every humidity sensor.
  let pub @humidity: Map[String, Int]
}

# An API/HTTP client for interacting with the Itho WiFi add-on API.
type pub Itho {
  let @client: Client

  # The amount of time to wait after retrying a failed operation.
  let pub @retry_wait_time: Duration

  fn pub static new(client: Client) -> Itho {
    Itho(client: client, retry_wait_time: Duration.from_secs(10))
  }

  # Sets a setting.
  #
  # The `setting` argument must be the setting index as obtained from the "Itho
  # settings" page. The `value` argument is the value for said setting. Only
  # integer values are supported.
  fn pub mut set[T: ToInt](setting: Int, value: ref T) -> Result[Nil, String] {
    let request = Request.get(PATH)
    let timeout = Duration.from_secs(TIMEOUT)

    request.query('setsetting', setting.to_string)
    request.query('value', value.to_int.to_string)

    retry(@retry_wait_time, fn { execute(request, timeout) })
      .map(fn (_) { nil })
      .map_error(fn (e) { e.to_string })
  }

  # Returns the value of a setting.
  #
  # The `setting` argument must be the setting index. See `Itho.set` for more
  # information.
  fn pub mut get(setting: Int) -> Result[Int, String] {
    let request = Request.get(PATH)
    let timeout = Duration.from_secs(TIMEOUT)

    request.query('getsetting', setting.to_string)

    let resp = try retry(@retry_wait_time, fn { execute(request, timeout) })
      .map_error(fn (e) { e.to_string })

    let root = match Json.parse(Buffer.new(resp.body)) {
      case Ok(Object(map)) -> map
      case _ -> throw 'Expected the response to be a JSON object'
    }

    let val = match root.remove('current') {
      case Some(Int(v)) -> v
      case Some(Float(v)) -> v.to_int
      case _ -> 0
    }

    Result.Ok(val)
  }

  # Returns the status of the Itho device.
  fn pub mut status -> Result[Status, String] {
    let request = Request.get(PATH)
    let timeout = Duration.from_secs(TIMEOUT)

    request.query('get', 'ithostatus')

    let resp = try retry(@retry_wait_time, fn { execute(request, timeout) })
      .map_error(fn (e) { e.to_string })

    let root = match Json.parse(Buffer.new(resp.body)) {
      case Ok(Object(map)) -> map
      case _ -> throw 'Expected the response to be a JSON object'
    }

    let humidity = Map.new
    let co2 = match root.opt('CO2 plenum (ppm)') {
      case Some(Int(v)) -> v
      case Some(Float(v)) -> v.to_int
      case _ -> 0
    }

    let exhaust_speed = match root.opt('exhaust fan (%)') {
      case Some(Int(v)) -> v
      case Some(Float(v)) -> v.to_int
      case _ -> 0
    }

    root.iter.each(fn (pair) {
      if pair.key.starts_with?('RH ').false? { return }

      let value = match pair.value {
        case Int(v) -> v
        case Float(v) -> v.to_int
        case _ -> return
      }

      # Sensors that aren't connected report a value that's very close to zero,
      # which due to the conversion to an Int is turned into zero.
      if value > 0 { humidity.set(pair.key, value) }
    })

    Result.Ok(
      Status(co2: co2, exhaust_speed: exhaust_speed, humidity: humidity),
    )
  }

  fn pub mut remotes -> Result[Map[String, Remote], String] {
    let request = Request.get(PATH)
    let timeout = Duration.from_secs(TIMEOUT)

    request.query('get', 'remotesinfo')

    let resp = try retry(@retry_wait_time, fn { execute(request, timeout) })
      .map_error(fn (e) { e.to_string })

    let root = match Json.parse(Buffer.new(resp.body)) {
      case Ok(Object(map)) -> map
      case _ -> throw 'Expected the response to be a JSON object'
    }

    let result = root.into_iter.reduce(Map.new, fn (map, entry) {
      let obj = match entry.value {
        case Object(obj) -> obj
        case _ -> return map
      }

      let status = match obj.remove('lastcmd') {
        case Some(Int(6)) -> RemoteStatus.High
        case Some(Int(13)) -> RemoteStatus.Cook30
        case Some(Int(14)) -> RemoteStatus.Cook60
        case Some(Int(8)) -> RemoteStatus.Timer1
        case Some(Int(9)) -> RemoteStatus.Timer2
        case Some(Int(10)) -> RemoteStatus.Timer3
        case _ -> RemoteStatus.Low
      }

      let timestamp = match obj.remove('timestamp') {
        case Some(Int(val)) -> val
        case _ -> 0
      }

      map.set(entry.key, Remote(status: status, timestamp: timestamp))
      map
    })

    Result.Ok(result)
  }

  fn mut execute(
    request: ref Request,
    timeout: ref Duration,
  ) -> Result[Response, Error] {
    @client.timeout_after = timeout

    let response = try @client.execute(request)

    # The API may produce an HTTP 500 if an I2C command fails. In this case we
    # want to retry the operation.
    if response.status == 500 {
      Result.Error(Error.InternalServerError(response.body.to_string))
    } else {
      Result.Ok(response)
    }
  }
}
