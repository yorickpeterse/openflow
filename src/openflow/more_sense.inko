import openflow.http (Client, Request, retry)
import std.io (Buffer)
import std.json (Json)
import std.time (Duration)

# The time after which a request times out, excluding retries.
let TIMEOUT = 30

# An API/HTTP client for interacting with MoreSense (https://moresense-nl.com/)
# CO2 sensors.
type pub MoreSense {
  let @client: Client

  # The amount of time to wait after retrying a failed operation.
  let pub @retry_wait_time: Duration

  fn pub static new(client: Client) -> MoreSense {
    MoreSense(client: client, retry_wait_time: Duration.from_secs(5))
  }

  # Returns the current CO2 value.
  fn pub mut co2 -> Result[Int, String] {
    let request = Request.get('/VALUES')
    let timeout = Duration.from_secs(TIMEOUT)
    let resp = try retry(@retry_wait_time, fn {
      @client.timeout_after = timeout
      @client.execute(request)
    })
      .map_error(fn (e) { e.to_string })

    match Json.parse(Buffer.new(resp.body)) {
      case Ok(Object(map)) -> {
        match map.opt('CO2') {
          case Some(Int(val)) -> Result.Ok(val)
          case _ -> throw 'Expected the "CO2" key to be an integer'
        }
      }
      case _ -> throw 'Expected the response to be a JSON object'
    }
  }
}
