import openflow.config (Itho as IthoConfig, Room as RoomConfig)
import openflow.itho (Itho)
import openflow.logger (Logger)
import openflow.metrics (Metrics)
import std.clone (Clone)
import std.cmp (Compare, Equal, Ordering, max, min)
import std.fmt (Format, Formatter)
import std.process (sleep)
import std.string (ToString)
import std.sync (Promise)
import std.time (Duration, Instant)

# The maximum value of an exhaust valve setting.
#
# While the API/hardware limit is 5000, the valves can make a distinct bonking
# noise when opening them this far. The actual Itho hardware also appears to
# limit the setting to this value.
let EXHAUST_MAX = 4000

fn exhaust_percentage(flow: Int, total_flow: Int) -> Int {
  if flow >= total_flow { return EXHAUST_MAX }

  if flow == 0 { return 0 }

  let raw = flow * 100 / total_flow * EXHAUST_MAX / 100

  # To reduce the amount of micro adjustments of the exhaust motors, we round
  # the setting values up to the nearest multiple of 100, so 625 becomes 700.
  raw + 99 / 100 * 100
}

# The ventilation status of a room.
type pub enum Status {
  # The default state, optionally applying a minimum amount of ventilation based
  # on the total ventilation need.
  case Default

  # The room is ventilated at the low speed.
  case Low

  # The room is ventilated at the medium speed.
  case Medium

  # The room is ventilated at the medium high speed.
  case MediumHigh

  # The room is ventilated at the high speed.
  case High

  # Ventilation is running at the maximum speed.
  case Maximum

  # Ventilation is enabled in response to an RF button.
  #
  # The wrapped value is the old status to transition back to.
  case Button(Status)

  # Ventilation is enabled in response to high humidity.
  case Humid

  fn pub humid? -> Bool {
    match self {
      case Humid -> true
      case _ -> false
    }
  }
}

impl Clone for Status {
  fn pub clone -> uni Status {
    match self {
      case Default -> recover Status.Default
      case Low -> recover Status.Low
      case Medium -> recover Status.Medium
      case MediumHigh -> recover Status.MediumHigh
      case High -> recover Status.High
      case Maximum -> recover Status.Maximum
      case Button(status) -> recover Status.Button(status.clone)
      case Humid -> recover Status.Humid
    }
  }
}

impl ToString for Status {
  fn pub to_string -> String {
    match self {
      case Default -> 'Default'
      case Low -> 'Low'
      case Medium -> 'Medium'
      case MediumHigh -> 'MediumHigh'
      case High -> 'High'
      case Maximum -> 'Maximum'
      case Button(_) -> 'Button'
      case Humid -> 'Humid'
    }
  }
}

impl Equal for Status {
  fn pub ==(other: ref Status) -> Bool {
    match (self, other) {
      case (Default, Default) -> true
      case (Low, Low) -> true
      case (Medium, Medium) -> true
      case (MediumHigh, MediumHigh) -> true
      case (High, High) -> true
      case (Maximum, Maximum) -> true
      case (Button(a), Button(b)) -> a == b
      case (Humid, Humid) -> true
      case _ -> false
    }
  }
}

impl Compare for Status {
  fn pub cmp(other: ref Status) -> Ordering {
    match (self, other) {
      case (Default, Default) -> Ordering.Equal
      case (Default, _) -> Ordering.Less
      case (Low, Low) -> Ordering.Equal
      case (Low, Default) -> Ordering.Greater
      case (Low, _) -> Ordering.Less
      case (Medium, Medium) -> Ordering.Equal
      case (Medium, Default or Low) -> Ordering.Greater
      case (Medium, _) -> Ordering.Less
      case (MediumHigh, MediumHigh) -> Ordering.Equal
      case (MediumHigh, Default or Low or Medium) -> Ordering.Greater
      case (MediumHigh, _) -> Ordering.Less
      case (High, High) -> Ordering.Equal
      case (High, Default or Low or Medium or MediumHigh) -> Ordering.Greater
      case (High, _) -> Ordering.Less
      case (Maximum, Maximum) -> Ordering.Equal
      case (Maximum, Button(_) or Humid) -> Ordering.Less
      case (Maximum, _) -> Ordering.Greater
      case (Button(a), Button(b)) -> a.cmp(b)
      case (Button(_), Humid or Maximum) -> Ordering.Less
      case (Button(_), _) -> Ordering.Greater
      case (Humid, Humid) -> Ordering.Equal
      case (Humid, _) -> Ordering.Greater
    }
  }
}

impl Format for Status {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Default -> formatter.write('Default')
      case Low -> formatter.write('Low')
      case Medium -> formatter.write('Medium')
      case MediumHigh -> formatter.write('MediumHigh')
      case High -> formatter.write('High')
      case Maximum -> formatter.write('Maximum')
      case Button(state) -> {
        formatter.write('Button(')
        state.fmt(formatter)
        formatter.write(')')
      }
      case Humid -> formatter.write('Humid')
    }
  }
}

# The state of a single room.
type pub Room {
  # The unique ID/name of the room.
  let pub @name: String

  # The ventilation status of this room.
  let pub mut @status: Status

  # The last time the status was updated.
  let pub mut @last_update: Instant

  # The value to multiply the raw air flow by to account for pressure loss in
  # the air duct.
  let @flow_correction: Float

  # The ID of the exhaust for this room.
  let @exhaust_id: Int

  # The exhaust setting value, in a range from 0 to 4000.
  #
  # This value defaults to -1. This ensures that the first time we make any
  # changes, we don't ignore exhausts with a target value of zero, as that could
  # result in them remaining in whatever state they were before we started.
  let mut @exhaust_value: Int

  # The default air flow in m3/hour, without the flow correction.
  let @default_flow: Int

  # The air flow in m3/h for the "low" setting.
  let @low_flow: Int

  # The air flow in m3/h for the "medium" setting.
  let @medium_flow: Int

  # The air flow in m3/h for the "medium high" setting.
  let @medium_high_flow: Int

  # The air flow in m3/h for the "high" setting.
  let @high_flow: Int

  # The minimum air flow in m3/hour, without the flow correction.
  let @minimum_flow: Int

  # The maximum air flow in m3/hour, without the flow correction.
  let @maximum_flow: Int

  # The button air flow in m3/hour, without the flow correction.
  let @button_flow: Int

  # The air flow in m3/hour, without the flow correction applied
  let mut @base_flow: Int

  # The air flow in m3/hour, with the flow correction applied
  let mut @current_flow: Int

  fn pub static new(name: String, config: ref RoomConfig) -> uni Room {
    recover {
      Room(
        name: name,
        status: Status.Default,
        flow_correction: config.flow.correction,
        exhaust_id: config.exhaust,
        exhaust_value: -1,
        default_flow: config.flow.default,
        low_flow: config.flow.low,
        medium_flow: config.flow.medium,
        medium_high_flow: config.flow.medium_high,
        high_flow: config.flow.high,
        minimum_flow: config.flow.minimum,
        maximum_flow: config.flow.maximum,
        button_flow: config.flow.button,
        base_flow: 0,
        current_flow: 0,
        last_update: Instant.new,
      )
    }
  }

  fn pub flow -> Int {
    @current_flow
  }

  fn pub mut update(status: Status) {
    @status = status
    @last_update = Instant.new
  }

  fn pub mut update_flow(flow: Int, maximum: Int) {
    if flow == 0 {
      @base_flow = min(@minimum_flow, maximum)
      @current_flow = correct(@base_flow)
      return
    }

    @base_flow = min(min(max(flow, @minimum_flow), @maximum_flow), maximum)
    @current_flow = correct(@base_flow)
  }

  fn correct(flow: Int) -> Int {
    (flow.to_float * @flow_correction).ceil.to_int
  }
}

# The state of the ventilation system, along with the means to update and apply
# changes.
type pub async State {
  # The minimum global air flow.
  let @minimum_flow: Int

  # The maximum global air flow.
  let @maximum_flow: Int

  # The ID of the setting that controls the ventilation speed.
  let @speed_id: Int

  # The ID of the setting that enables/disables manual control of the
  # ventilation unit.
  let @manual_id: Int

  # The speed (as a percentage of its maximum) the ventilation unit is running
  # at.
  let mut @speed: Int

  # The rooms to ventilate along with their current state.
  let @rooms: Map[String, Room]
  let @logger: Logger
  let @itho: Itho
  let @metrics: Metrics

  # The amount of time to wait (in seconds) for exhaust valves to adjust
  # themselves.
  let @adjust_time: Duration

  fn pub static new(
    itho: uni Itho,
    logger: Logger,
    metrics: uni Metrics,
    config: ref IthoConfig,
  ) -> State {
    let min = config.minimum_flow

    State(
      itho: itho,
      metrics: metrics,
      minimum_flow: min,
      maximum_flow: config.maximum_flow,
      speed_id: config.speed_id,
      manual_id: config.manual_id,
      speed: 0,
      rooms: recover Map.new,
      logger: logger,
      adjust_time: recover Duration.from_secs(config.adjust_time),
    )
  }

  fn pub async mut add_room(room: uni Room) {
    @rooms.set(room.name, room)
  }

  fn pub async mut prepare {
    if @itho.get(@manual_id).or(0) == 1 { return }

    @logger.info('Enabling manual control')
    @itho.set(@manual_id, value: 1).get
    sleep(@adjust_time * @rooms.size)
  }

  # Run a closure in the context of the current state to allow updating of the
  # internal state.
  #
  # If the block returns `true`, the changes are applied immediately.
  fn pub async mut update(block: uni fn (mut Map[String, Room]) -> Bool) {
    if block.call(@rooms) { apply_state }
  }

  # Run a closure in the context of the current state, passing the extra data to
  # the closure.
  #
  # If the block returns `true`, the changes are applied immediately.
  fn pub async mut update_with[T](
    data: uni T,
    block: uni fn (mut Map[String, Room], T) -> Bool,
  ) {
    if block.call(@rooms, data) { apply_state }
  }

  # Applies the state to the ventilation system.
  #
  # The given channel is sent a message after applying the changes. This allows
  # other processes to wait until the changes are applied, regardless of how
  # long that takes.
  fn pub async mut apply(promise: uni Promise[Nil]) {
    apply_state
    promise.set(nil)
  }

  fn mut apply_state {
    let total_flow = max(
      @minimum_flow,
      min(update_flow_per_room, @maximum_flow),
    )

    let new_speed = flow_percentage(total_flow)

    # Speed reductions are applied first, while increases are applied last. This
    # ensures we don't produce excessive air noise while the exhaust valves are
    # adjusted.
    if new_speed < @speed { update_speed(new_speed) }

    for { @value = room } in @rooms.iter_mut {
      let flow = room.current_flow
      let new = exhaust_percentage(flow, total_flow)
      let old = room.exhaust_value

      @metrics.add('air_flow', fn (m) {
        m.tag('room', room.name)
        m.field('rate', flow)
      })

      if new == old { next }

      info(
        room,
        'changing exhaust from ${old} to ${new} (${room.status}, ${flow} m3/h)',
      )

      @itho.set(setting: room.exhaust_id, value: new).or_panic_with(
        "the exhaust setting couldn't be updated",
      )

      room.exhaust_value = new
      wait_for_valve
    }

    if new_speed > @speed { update_speed(new_speed) }

    @metrics.add('exhaust_speed', fn (m) { m.field('percentage', new_speed) })
  }

  fn mut update_speed(speed: Int) {
    @logger.info('Changing exhaust speed from ${@speed}% to ${speed}%')
    @itho.set(setting: @speed_id, value: speed).or_panic_with(
      "the exhaust speed couldn't be updated",
    )

    @speed = speed
    wait_for_valve
  }

  fn mut update_flow_per_room -> Int {
    let humid = @rooms.values.any?(fn (room) {
      match room.status {
        case Humid -> true
        case _ -> false
      }
    })

    let mut total = @rooms.iter_mut.reduce(0, fn (sum, entry) {
      let room = entry.value
      let base = if humid {
        match room.status {
          case Default -> 0
          case Humid -> room.maximum_flow
          case _ -> 20
        }
      } else {
        match room.status {
          case Default -> 0
          case Low -> room.low_flow
          case Medium -> room.medium_flow
          case MediumHigh -> room.medium_high_flow
          case High -> room.high_flow
          case Button(_) -> room.button_flow
          case Maximum or Humid -> room.maximum_flow
        }
      }

      room.update_flow(base, @maximum_flow)
      sum + room.current_flow
    })

    if total >= @minimum_flow { return total }

    assign_default_flow(total)
    @rooms.values.reduce(0, fn (sum, room) { sum + room.current_flow })
  }

  fn mut assign_default_flow(total: Int) {
    let mut extra = @minimum_flow - total

    for e in @rooms.iter_mut {
      let room = match e.value.status {
        case Default if e.value.default_flow > 0 -> e.value
        case _ -> next
      }

      # Ventilation speeds less than 10 m3 (give or take) don't really do much,
      # so we avoid enabling ventilation for a room in such a case.
      if extra == 0 or (room.current_flow == 0 and extra < 10) { next }

      let add = max(min(room.default_flow - room.minimum_flow, extra), 0)

      extra -= add
      room.update_flow(room.base_flow + add, @maximum_flow)
    }
  }

  fn flow_percentage(flow: Int) -> Int {
    flow * 100 / @maximum_flow
  }

  fn mut info(room: ref Room, message: String) {
    @logger.info('${room.name}: ${message}')
  }

  fn wait_for_valve {
    sleep(@adjust_time)
  }
}
