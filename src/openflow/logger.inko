import std.stdio (Stdout)
import std.time (DateTime)

fn iso8601_time -> String {
  DateTime.utc.to_iso8601
}

type copy enum Level {
  case Info
  case Error
  case None
}

# A process for logging messages to an output stream.
type pub async Logger {
  let @stream: Stdout
  let @level: Level

  fn pub static new -> Logger {
    Logger(stream: recover Stdout.new, level: Level.Info)
  }

  fn pub static disabled -> Logger {
    Logger(stream: recover Stdout.new, level: Level.None)
  }

  fn pub async mut info(message: String) {
    write(Level.Info, message)
  }

  fn pub async mut error(message: String) {
    write(Level.Error, message)
  }

  fn mut write(level: Level, message: String) {
    let label = match (@level, level) {
      case (Info, Info) -> 'INFO'
      case (Info or Error, Error) -> 'ERROR'
      case _ -> return
    }

    # Logging failing isn't a big deal, but having to handle potential failures
    # _every_ time _is_, so we simply discard any errors.
    let _ = @stream.write('${iso8601_time}: ${label}: ${message}\n')
  }
}
