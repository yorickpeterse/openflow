import openflow.config (Humidity as Config)
import openflow.itho (Itho)
import openflow.logger (Logger)
import openflow.metrics (Metrics)
import openflow.state (State, Status)
import std.process (sleep)
import std.time (Duration, Instant)

# The amount of time between checking the sensor status.
let CHECK_INTERVAL = 30

# The amount of time to maintain humidity samples for.
let SAMPLE_INTERVAL = 300

# The number of humidity samples to maintain.
let HUMIDITY_SAMPLES = 300 / 30

# A ring buffer of humidity samples.
type pub Samples {
  let @values: Array[Int]
  let mut @index: Int

  fn pub static new(capacity: Int) -> Samples {
    Samples(values: Array.filled(capacity, with: 0), index: 0)
  }

  # Pushes a new value into the buffer, returning the oldest value.
  fn pub mut push(value: Int) -> Int {
    @values.swap(@index := (@index + 1 % @values.size), value)
  }
}

# The state of a single humidity sensor.
type copy enum Humidity {
  # The room is dry, no ventilation is necessary.
  case Dry

  # The room is drying up.
  case Drying

  # The room is humid, and ventilation must be applied.
  case Humid

  fn humid? -> Bool {
    match self {
      case Humid -> true
      case _ -> false
    }
  }
}

type pub Sensor {
  let @name: String
  let @id: String
  let mut @humidity: Humidity
  let @samples: Samples
  let mut @last_status_update: Instant

  fn pub static new(name: String, id: String) -> Sensor {
    Sensor(
      name: name,
      id: id,
      humidity: Humidity.Dry,
      samples: Samples.new(HUMIDITY_SAMPLES),
      last_status_update: Instant.new,
    )
  }

  fn mut update(humidity: Humidity) {
    @humidity = humidity
    update_time
  }

  fn mut update_time {
    @last_status_update = Instant.new
  }
}

# A process monitoring humidity sensors, adjusting ventilation if the humidity
# gets too high.
type pub async Input {
  let @state: State
  let @logger: Logger
  let @metrics: Metrics
  let @itho: Itho

  # The humidity sensors to monitor.
  let @sensors: Array[Sensor]

  # If the humidity is greater than this value, ventilation is applied.
  let @high: Int

  # Ventilation is stopped once the humidity is below this value for long
  # enough.
  let @low: Int

  # If humidity increases by this value then ventilation is enabled, regardless
  # of the absolute value.
  let @max_increase: Int

  # The value to add to the raw sensor values to obtain the correct value.
  let @correction: Int

  # The amount of time humidity must be below the "low" threshold before
  # ventilation can be disabled.
  let mut @low_time: Duration

  # The interval at which to check the humidity sensors.
  let @check_interval: Duration

  fn pub static new(
    state: State,
    logger: Logger,
    metrics: uni Metrics,
    itho: uni Itho,
    config: ref Config,
  ) -> Input {
    Input(
      state: state,
      logger: logger,
      metrics: metrics,
      itho: itho,
      sensors: recover [],
      high: config.high,
      low: config.low,
      max_increase: config.max_increase,
      correction: config.correction,
      low_time: recover Duration.from_secs(1800),
      check_interval: recover Duration.from_secs(CHECK_INTERVAL),
    )
  }

  fn pub async mut add_sensor(sensor: uni Sensor) {
    @sensors.push(sensor)
  }

  fn pub async mut run {
    loop {
      iteration
      sleep(@check_interval)
    }
  }

  fn mut iteration {
    let status = match @itho.status {
      case Ok(val) -> val
      case Error(err) -> {
        @logger.error('failed to get the Itho status: ${err}')
        return
      }
    }

    let updates = @sensors.iter_mut.reduce(recover Map.new, fn (map, sensor) {
      let mut humidity = status.humidity.get(sensor.id).or(0)

      # The Itho sensors aren't entirely accurate, often reporting values 5-10%
      # higher than reality, but only if the humidity is in the range of 60-90%.
      # Below 60% it in fact appears to report values too low (e.g. I've seen it
      # report values as low as 45%, when in reality the humidity was higher).
      if humidity >= 60 { humidity += @correction }

      @metrics.add('humidity', fn (m) {
        m.tag('room', sensor.name)
        m.field('percentage', humidity)
      })

      update_sensor(sensor, humidity)

      let humid = match sensor.humidity {
        case Humid or Drying -> true
        case Dry -> false
      }

      map.set(sensor.name, humid)
      map
    })

    apply(updates)
  }

  fn mut update_sensor(sensor: mut Sensor, humidity: Int) {
    let large_increase = match sensor.samples.push(humidity) {
      case n if n > 0 and humidity - n >= @max_increase -> true
      case _ -> false
    }

    if humidity >= @high or large_increase {
      match sensor.humidity {
        case Humid -> sensor.update_time
        case _ -> {
          if large_increase {
            info(
              sensor.name,
              'humidity increased by more than ${@max_increase}%, enabling ventilation',
            )
          }

          sensor.update(Humidity.Humid)
        }
      }
    } else {
      match sensor.humidity {
        case Humid if humidity <= @low -> sensor.update(Humidity.Drying)
        case Humid if humidity > @low -> sensor.update_time
        # When ventilation kicks in, the humidity drops, but after a little
        # while increases again. This check ensures that we don't disable
        # ventilation prematurely just because the reached the low target for a
        # brief period of time.
        #
        # The extra "padding" is to account for sporadic spikes of 1%, which can
        # sometimes happen due to rounding or just coincidence.
        case Drying if humidity >= (@low + (@high - @low / 2)) -> {
          sensor.update(Humidity.Humid)
        }
        case Drying if sensor.last_status_update.elapsed >= @low_time -> {
          info(sensor.name, 'the room dried up, disabling ventilation')
          sensor.update(Humidity.Dry)
        }
        case _ -> {}
      }
    }
  }

  fn apply(updates: uni Map[String, Bool]) {
    @state.update_with(updates, fn move (rooms, updates) {
      updates.into_iter.reduce(false, fn (apply_now, entry) {
        match entry {
          case (key, humid) -> {
            let room = rooms.get_mut(key).or_panic

            if humid {
              room.update(recover Status.Humid)
            } else if room.status.humid? {
              room.update(recover Status.Default)
            }

            apply_now or humid
          }
        }
      })
    })
  }

  fn mut info(room: String, message: String) {
    @logger.info('${room}: ${message}')
  }
}
