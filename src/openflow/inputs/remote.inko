import openflow.itho (Itho, Remote, RemoteStatus)
import openflow.logger (Logger)
import openflow.state (State, Status)
import std.process (sleep)
import std.time (Duration, Instant)

type pub inline Button {
  let @rooms: Array[String]
  let @duration: Duration

  fn pub static new(rooms: Array[String], duration: Duration) -> Button {
    Button(rooms: rooms, duration: duration)
  }
}

# A process monitoring the state of an RF button and adjusting ventilation
# accordingly.
type pub async Input {
  let @state: State
  let @logger: Logger
  let @itho: Itho

  # The status of the RF remote.
  let mut @status: RemoteStatus

  # The interval at which to check the button state.
  let @interval: Duration

  # The timestamp of when the last command was received.
  let mut @timestamp: Int

  # The time after which the remote should be reset to its initial state.
  let mut @deadline: Instant

  # The ID of the remote as used by the Itho WiFi API.
  let @id: String

  # The button states and the corresponding ventilation rules.
  let @buttons: Map[String, Button]

  fn pub static new(
    state: State,
    logger: Logger,
    itho: uni Itho,
    id: String,
  ) -> Input {
    Input(
      state: state,
      logger: logger,
      itho: itho,
      status: recover RemoteStatus.Low,
      interval: recover Duration.from_secs(15),
      timestamp: 0,
      deadline: recover Instant.new,
      id: id,
      buttons: recover Map.new,
    )
  }

  fn pub async mut add_button(name: String, button: uni Button) {
    @buttons.set(name, button)
  }

  fn pub async mut run {
    loop {
      iteration
      sleep(@interval)
    }
  }

  fn mut iteration {
    match @itho.remotes.map(fn (s) { s.remove(@id) }) {
      case Ok(Ok(remote)) -> check(remote)
      case Ok(Error(_)) -> @logger.error('no state was found for the remote')
      case Error(err) -> {
        @logger.error('failed to get the remote status: ${err}')
      }
    }
  }

  fn mut check(remote: Remote) {
    # When starting up we ignore the current button state. This way if you
    # restart say six hours after pressing the Cook30 button, we don't start
    # ventilating according to that button again.
    if @timestamp == 0 {
      @timestamp = remote.timestamp
      return
    }

    if remote.timestamp == @timestamp {
      let reset = match @status {
        case Low -> false
        case _ -> @deadline.remaining.to_nanos <= 0
      }

      if reset {
        @logger.info('The ${@status} timer expired')
        reset_rooms
        @status = RemoteStatus.Low
      }

      return
    }

    @status = remote.status.clone
    @timestamp = remote.timestamp

    match @status {
      case Low -> {
        @logger.info('Resetting the remote to its default state')
        reset_rooms
      }
      case state -> {
        match @buttons.get(state.name) {
          case Ok(btn) -> {
            enable(recover btn.rooms.clone)
            @deadline = btn.duration.to_instant
          }
          case _ -> {}
        }
      }
    }
  }

  fn enable(rooms: uni Array[String]) {
    @state.update_with(rooms, fn (rooms, enable) {
      for { @value = room } in rooms.iter_mut {
        match room.status.clone {
          case Button(old) -> room.update(old)
          case _ -> {}
        }
      }

      for name in enable.into_iter {
        let room = rooms.get_mut(name).or_panic

        room.update(recover Status.Button(room.status.clone))
      }

      true
    })
  }

  fn reset_rooms {
    @state.update(fn (rooms) {
      for { @value = room } in rooms.iter_mut {
        match room.status.clone {
          case Button(old) -> room.update(old)
          case _ -> {}
        }
      }

      true
    })
  }
}
