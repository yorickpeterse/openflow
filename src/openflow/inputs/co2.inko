import openflow::co2::(SIZE, Co2 as Co2)
import openflow::experimental_ext
import openflow::logger::Logger
import openflow::metrics::(Metric, Metrics)
import openflow::more_sense::MoreSense
import openflow::state::(State, Status)
import std::cmp::(max)
import std::process::(sleep)
import std::time::(Duration, Instant)

# How many samples we should gather before updating the CO2 levels.
let pub SAMPLES = 20

# The state of a single CO2 sensor.
class pub Sensor {
  let @name: String
  let @client: MoreSense
  let @co2: Co2

  # The ventilation status of the room this sensor belongs to.
  let @status: Status

  # The time at which the current status was produced.
  let @last_status_change: Instant

  # The CO2 at the time of the last status change.
  let @last_change_co2: Int

  fn pub static new(name: String, client: MoreSense) -> Sensor {
    Sensor {
      @name = name,
      @client = client,
      @co2 = Co2.new,
      @status = Status.Default,
      @last_status_change = Instant.new,
      @last_change_co2 = 0,
    }
  }

  fn mut sample -> Result[Nil, String] {
    @co2.add(try @client.co2)
    Result.Ok(nil)
  }

  fn value -> Int {
    @co2.value
  }

  fn mut update_co2 -> Int {
    @co2.update
    @co2.value
  }

  fn mut update_status(status: Status) {
    @status = status
    @last_status_change = Instant.new
    @last_change_co2 = @co2.value
  }

  fn reduce?(after: ref Duration) -> Bool {
    # If we reduce levels this much, we can safely reduce ventilation speeds
    # right away. This won't reduce speeds too quickly, as we only periodically
    # reach this point.
    if @last_change_co2 - @co2.value >= 200 or @co2.value <= 600 { return true }

    @last_status_change.elapsed >= after
      and @last_change_co2 - @co2.value >= 100
  }
}

# A process monitoring a set of CO2 sensors, adjusting ventilation based on the
# CO2 levels.
class pub async Input {
  let @state: State
  let @logger: Logger
  let @metrics: Metrics

  # The room names and their corresponding sensors to monitor.
  let @sensors: Array[Sensor]

  # The time between CO2 samples.
  let @sample_interval: Duration

  # The amount of time to wait after an update before reducing the ventilation
  # speed of a room.
  let @reduce_wait_time: Duration

  fn pub static new(
    state: State,
    logger: Logger,
    metrics: uni Metrics,
  ) -> Input {
    Input {
      @state = state,
      @logger = logger,
      @metrics = metrics,
      @sensors = recover [],
      @sample_interval = recover Duration.from_secs(30),
      @reduce_wait_time = recover Duration.from_secs(1800),
    }
  }

  fn pub async mut add_sensor(sensor: uni Sensor) {
    @sensors.push(sensor)
  }

  fn pub async mut run {
    loop { iteration }
  }

  fn mut iteration {
    SAMPLES.times fn (_) {
      sleep(@sample_interval)
      sample
    }

    update
  }

  fn mut update {
    let updates = @sensors.iter_mut.reduce(recover Map.new) fn (map, sensor) {
      let new = sensor.update_co2
      let status = recover {
        if new >= 900 {
          Status.Maximum
        } else if new >= 850 {
          Status.Active(75)
        } else if new >= 800 {
          Status.Active(70)
        } else if new >= 750 {
          Status.Active(55)
        } else if new >= 700 {
          Status.Active(40)
        } else if new >= 650 {
          Status.Active(20)
        } else {
          Status.Default
        }
      }

      if status >= sensor.status or sensor.reduce?(@reduce_wait_time) {
        sensor.update_status(status.clone)
        map.set(sensor.name, status)
      }

      @metrics.add('co2_room') fn (m) {
        m.tag('room', sensor.name)
        m.field('ppm', new)
      }

      map
    }

    apply(updates)
  }

  fn mut sample {
    @sensors.iter_mut.each fn (sensor) {
      match sensor.sample {
        case Ok(_) -> {}
        case Error(e) -> error(sensor.name, "failed to read the CO2 value: {e}")
      }
    }
  }

  fn apply(updates: uni Map[String, Status]) {
    @state.update_with(updates) fn move (rooms, updates) {
      updates.into_iter.each fn (entry) {
        entry.let fn (name, status) {
          let room = rooms.get_mut(name)

          match room.status {
            case Humid or Button(_) -> {}
            case _ -> room.update(status)
          }
        }
      }

      false
    }
  }

  fn mut error(room: String, message: String) {
    @logger.error("{room}: {message}")
  }
}
