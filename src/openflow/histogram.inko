# A histogram for tracking the occurrences of some value.
class pub Histogram {
  let @buckets: Array[Int]

  # Returns a new `Histogram` with `buckets` buckets.
  fn pub static new(buckets: Int) -> Histogram {
    Histogram { @buckets = Array.filled(with: 0, times: buckets) }
  }

  # Increments the number of values in the given bucket.
  fn pub mut increment(bucket: Int) {
    @buckets.set(bucket, @buckets.get(bucket) + 1)
  }

  # Returns the bucket that represents the median.
  #
  # If the histogram is empty, the first bucket is returned.
  fn pub median -> Int {
    let mid = @buckets.iter.reduce(0) fn (sum, count) { sum + count } + 1 / 2
    let mut total = 0

    @buckets
      .iter
      .with_index
      .find_map fn move (pair) {
        total += pair.1

        if total > mid { Option.Some(pair.0) } else { Option.None }
      }
      .unwrap_or(0)
  }

  # Resets the values of all buckets back to zero.
  fn pub mut reset {
    @buckets.length.times fn (index) { @buckets.set(index, 0) }
  }
}
