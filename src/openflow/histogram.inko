import std.iter (Stream)

# A histogram for tracking the occurrences of some value.
type pub inline Histogram {
  let @buckets: Array[Int]

  # Returns a new `Histogram` with `buckets` buckets.
  fn pub static new(buckets: Int) -> Histogram {
    Histogram(Array.filled(with: 0, times: buckets))
  }

  # Returns the value of the bucket.
  fn pub get(bucket: Int) -> Int {
    @buckets.get(bucket).or_panic
  }

  # Resets the given bucket's count.
  fn pub mut remove(bucket: Int) {
    @buckets.set(bucket, 0)
  }

  # Increments the number of values in the given bucket.
  fn pub mut increment(bucket: Int) {
    @buckets.set(bucket, @buckets.get(bucket).or_panic + 1)
  }

  # Resets the values of all buckets back to zero.
  fn pub mut reset {
    @buckets.size.times(fn (index) { @buckets.set(index, 0) })
  }

  # Returns an iterator over the counts in the histogram.
  fn pub iter -> Stream[Int] {
    @buckets.iter
  }
}
