import openflow.http (Client, Error, Request, Response, retry)
import std.int (Format)
import std.json (Json)
import std.time (DateTime, Duration)

# The time after which a request times out.
let TIMEOUT = 30

# The sensor states.
class pub Sensors {
  # A Map that maps sensor IDs to a boolean indicating if motion is detected.
  let pub @motion: Map[Int, Bool]
}

# An API/HTTP client for interacting with the Philips Hue bridge and motion
# sensors.
class pub Hue {
  let @client: Client
  let @user: String

  # The amount of time to wait after retrying a failed operation.
  let pub @retry_wait_time: Duration

  fn pub static new(client: Client, user: String) -> Hue {
    Hue {
      @client = client,
      @user = user,
      @retry_wait_time = Duration.from_secs(5),
    }
  }

  fn pub mut sensors -> Result[Sensors, String] {
    let request = Request.get('/api/${@user}/sensors')
    let timeout = Duration.from_secs(TIMEOUT)
    let resp = try retry(@retry_wait_time, fn {
      @client.timeout_after = timeout
      @client.execute(request)
    })
      .map_error(fn (e) { e.to_string })

    let body = resp.body.drain_to_string
    let root = match Json.parse(body) {
      case Ok(Object(map)) -> map
      case _ -> throw 'Expected the response to be a JSON object'
    }

    let motion = Map.new

    root.into_iter.each(fn (entry) {
      let id = Int.parse(entry.key, Format.Decimal).get
      let val = match entry {
        case { @value = Object(map) } -> map
        case _ -> return
      }

      let state = match val.remove('state') {
        case Some(Object(map)) -> map
        case _ -> return
      }

      match val.opt('type') {
        case Some(String('ZLLPresence')) -> {
          match state.opt('presence') {
            case Some(Bool(val)) -> {
              motion.set(id, val)
              nil
            }
            case _ -> {
              motion.set(id, false)
              nil
            }
          }
        }
        case _ -> {}
      }
    })

    Result.Ok(Sensors { @motion = motion })
  }
}
