import openflow::config::(Co2 as Co2Config, Room as RoomConfig, Schedule)
import openflow::room::(Room, State)
import std::test::Tests
import std::time::(DateTime, Duration)

fn co2_config(target: Int) -> Co2Config {
  Co2Config {
    @target = target,
    @metrics_interval = Duration.from_secs(0),
    @sample_interval = Duration.from_secs(10),
    @half_sample_interval = Duration.from_secs(5),
    @closed_sample_interval = Duration.from_secs(30),
    @sample_time = Duration.from_secs(0),
    @sample_wait_time = Duration.from_secs(0),
    @increase = 20,
  }
}

fn config -> RoomConfig {
  RoomConfig {
    @name = 'living_room',
    @exhaust = 12,
    @schedule = Option.None,
    @motion = Option.None,
    @humidity = Option.None,
    @ping = [],
    @minimum_flow = 0,
    @flow = 15,
    @flow_correction = 1.0,
    @ventilation_time = Duration.from_secs(10),
    @co2 = true,
  }
}

fn hour(hour: Int) -> DateTime {
  DateTime {
    @year = 2023,
    @month = 1,
    @day = 12,
    @hour = hour,
    @minute = 4,
    @second = 2,
    @sub_second = 0.0,
    @utc_offset = 0,
  }
}

fn pub tests(t: mut Tests) {
  t.test('Room.calculate_flow') fn (t) {
    let conf = config
    let room = Room.new(conf)

    t.equal(room.calculate_flow(700, 20), 7)

    room.co2.add(100)
    room.co2.update
    t.equal(room.calculate_flow(700, 20), 7)

    room.co2.add(400)
    room.co2.update
    t.equal(room.calculate_flow(700, 20), 7)

    room.co2.add(650)
    room.co2.update
    t.equal(room.calculate_flow(700, 20), 12)

    room.co2.add(700)
    room.co2.update
    t.equal(room.calculate_flow(700, 20), 15)

    room.co2.add(750)
    room.co2.update
    t.equal(room.calculate_flow(700, 20), 18)

    room.co2.add(800)
    room.co2.update
    t.equal(room.calculate_flow(700, 20), 21)

    room.co2.add(1000)
    room.co2.update
    t.equal(room.calculate_flow(700, 20), 33)
  }

  t.test('Room.sample_co2?') fn (t) {
    let conf = config
    let room = Room.new(conf)
    let co2 = co2_config(target: 700)

    t.false(room.sample_co2?(co2))

    room.update(State.Open)
    t.true(room.sample_co2?(co2))

    room.update(State.Minimum)
    t.false(room.sample_co2?(co2))

    room.update(State.Closed)
    room.co2.add(800)
    room.co2.update
    t.true(room.sample_co2?(co2))

    room.update(State.Schedule)
    conf.schedule = Option.Some(Schedule.Morning)
    t.false(room.sample_co2?(co2))

    conf.schedule = Option.Some(Schedule.Night)
    t.true(room.sample_co2?(co2))
  }

  t.test('Room.sample_co2? with a room that is closed for a long time') fn (t) {
    let conf = config
    let room = Room.new(conf)
    let co2 = co2_config(target: 700)

    co2.closed_sample_interval = Duration.from_secs(0)

    t.true(room.sample_co2?(co2))
  }

  t.test('Room.update') fn (t) {
    let conf = config
    let room = Room.new(conf)
    let updated = room.last_update

    room.update(State.Open)
    t.equal(room.state, State.Open)
    t.greater(room.last_update, updated)

    conf.minimum_flow = 10
    room.update(State.Closed)
    t.equal(room.state, State.Minimum)
  }

  t.test('Room.update with a new Motion state') fn (t) {
    let conf = config
    let room = Room.new(conf)
    let first_update = room.last_update

    room.update(State.Motion(1, 1))
    t.greater(room.last_update, first_update)

    let updated = room.last_update

    room.update(State.Motion(1, 2))
    t.equal(room.last_update, updated)
  }

  t.test('Room.calculate_minimum_flow') fn (t) {
    let conf = config
    let room = Room.new(conf)

    t.equal(room.calculate_minimum_flow(co2: false), 0)

    conf.minimum_flow = 10

    t.equal(room.calculate_minimum_flow(co2: false), 10)
    t.equal(room.calculate_minimum_flow(co2: true), 0)
  }

  t.test('Room.calculate_exhaust_setting') fn (t) {
    let conf = config
    let room = Room.new(conf)

    t.equal(room.calculate_exhaust_setting(flow: 0, total_flow: 70), 0)
    t.equal(room.calculate_exhaust_setting(flow: 30, total_flow: 70), 1800)
    t.equal(room.calculate_exhaust_setting(flow: 31, total_flow: 70), 1800)
    t.equal(room.calculate_exhaust_setting(flow: 32, total_flow: 70), 1900)
    t.equal(room.calculate_exhaust_setting(flow: 40, total_flow: 70), 2300)
    t.equal(room.calculate_exhaust_setting(flow: 70, total_flow: 70), 4000)
    t.equal(room.calculate_exhaust_setting(flow: 100, total_flow: 70), 4000)
  }

  t.test('Room.active_schedule? without a schedule') fn (t) {
    let conf = config
    let room = Room.new(conf)

    t.false(room.active_schedule?(hour(14)))

    room.co2.add(1200)
    room.co2.update

    t.false(room.active_schedule?(hour(14)))
  }

  t.test('Room.active_schedule? with a morning schedule') fn (t) {
    let conf = config
    let room = Room.new(conf)

    conf.schedule = Option.Some(Schedule.Morning)

    t.false(room.active_schedule?(hour(14)))
    t.true(room.active_schedule?(hour(6)))
  }

  t.test('Room.active_schedule? with a night schedule') fn (t) {
    let conf = config
    let room = Room.new(conf)

    conf.schedule = Option.Some(Schedule.Night)

    t.true(room.active_schedule?(hour(4)))
    t.false(room.active_schedule?(hour(11)))
    t.false(room.active_schedule?(hour(14)))
  }
}
