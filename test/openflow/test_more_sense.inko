import openflow.http (Client, Driver, Error, Request, Response, TestDriver)
import openflow.more_sense (MoreSense)
import std.io (Error as IoError)
import std.test (Tests)
import std.time (Duration, ToInstant)

type TimeoutDriver {
  let mut @timed_out: Bool

  fn static new -> TimeoutDriver {
    TimeoutDriver(false)
  }
}

impl Driver for TimeoutDriver {
  fn pub mut timeout_after=[I: ToInstant](time: ref I) {}

  fn pub mut execute(request: ref Request) -> Result[Response, Error] {
    if @timed_out {
      Result.Ok(Response.ok('{ "CO2": 750 }'.to_byte_array))
    } else {
      @timed_out = true
      Result.Error(Error.Network(IoError.TimedOut))
    }
  }
}

fn pub tests(t: mut Tests) {
  t.test('MoreSense.co2 with a valid response', fn (t) {
    let driver = TestDriver.new

    driver.request(
      matches: fn (req) { req.path == '/VALUES' },
      then: fn (_) { Response.ok('{ "CO2": 750 }'.to_byte_array) },
    )

    let ms = MoreSense.new(Client.with_driver(driver as Driver))

    t.equal(ms.co2, Result.Ok(750))
  })

  t.test('MoreSense.co2 retries failed requests', fn (t) {
    let ms = MoreSense.new(Client.with_driver(TimeoutDriver.new as Driver))

    ms.retry_wait_time = Duration.from_secs(0)
    t.true(ms.co2.ok?)
  })

  t.test('MoreSense.co2 with an invalid response format', fn (t) {
    let driver = TestDriver.new

    driver.request(
      matches: fn (req) { req.path == '/VALUES' },
      then: fn (_) { Response.ok('[]'.to_byte_array) },
    )

    let ms = MoreSense.new(Client.with_driver(driver as Driver))

    t.true(ms.co2.error?)
  })
}
