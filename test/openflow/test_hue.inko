import openflow.http (Client, Driver, Error, Request, Response, TestDriver)
import openflow.hue (Hue)
import std.io (Error as IoError)
import std.test (Tests)
import std.time (Duration, ToInstant)

type TimeoutDriver {
  let mut @timed_out: Bool

  fn static new -> TimeoutDriver {
    TimeoutDriver(false)
  }
}

impl Driver for TimeoutDriver {
  fn pub mut timeout_after=[I: ToInstant](time: ref I) {}

  fn pub mut execute(request: ref Request) -> Result[Response, Error] {
    if @timed_out {
      Result.Ok(
        Response.ok(
          '{ "1": { "type": "ZLLPresence", "state": { "presence": false } } }'
            .to_byte_array,
        ),
      )
    } else {
      @timed_out = true
      Result.Error(Error.Network(IoError.TimedOut))
    }
  }
}

fn pub tests(t: mut Tests) {
  t.test('Hue.sensors with a valid response format', fn (t) {
    let driver = TestDriver.new

    driver.request(
      matches: fn (req) { req.path == '/api/foo/sensors' },
      then: fn (_) {
        Response.ok(
          '
          {
            "1": { "type": "ZLLPresence", "state": { "presence": false } },
            "2": { "type": "ZLLPresence", "state": { "presence": true } }
          }
          '
            .to_byte_array,
        )
      },
    )

    let client = Client.with_driver(driver as Driver)
    let hue = Hue.new(client, user: 'foo')
    let sensors = hue.sensors.get

    t.equal(sensors.motion.get(1), Result.Ok(false))
    t.equal(sensors.motion.get(2), Result.Ok(true))
  })

  t.test('Hue.sensors retries failed requests', fn (t) {
    let client = Client.with_driver(TimeoutDriver.new as Driver)
    let hue = Hue.new(client, user: 'foo')

    hue.retry_wait_time = Duration.from_secs(0)

    t.true(hue.sensors.ok?)
  })

  t.test('Hue.sensors with an invalid response format', fn (t) {
    let driver = TestDriver.new

    driver.request(
      matches: fn (req) { req.path == '/api/foo/sensors' },
      then: fn (_) { Response.ok('[]'.to_byte_array) },
    )

    let client = Client.with_driver(driver as Driver)
    let hue = Hue.new(client, user: 'foo')

    t.true(hue.sensors.error?)
  })
}
