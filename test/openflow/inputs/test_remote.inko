import helpers (Snapshot, allow_api_calls, state)
import openflow.http (Client, Driver, Response, TestDriver)
import openflow.inputs.remote (Button, Input)
import openflow.itho (Itho)
import openflow.logger (Logger)
import openflow.state (State, Status)
import std.int (ToInt)
import std.json (Json)
import std.sync (Future, Promise)
import std.test (Tests)
import std.time (Duration)

type copy enum RemoteState {
  case Low(Int)
  case Timer1(Int)

  fn timestamp -> Int {
    match self {
      case Low(val) or Timer1(val) -> val
    }
  }
}

impl ToInt for RemoteState {
  fn pub to_int -> Int {
    match self {
      case Low(_) -> 0
      case Timer1(_) -> 8
    }
  }
}

impl Input {
  fn async mut run_iteration {
    iteration
  }

  fn async mut wait(promise: uni Promise[Nil]) {
    promise.set(nil)
  }
}

fn input(state: State, states: uni Array[RemoteState]) -> Input {
  let logger = Logger.disabled
  let driver = recover {
    let driver = TestDriver.new
    let mut index = 0

    driver.request(
      matches: fn (req) {
        req.path == '/api.html'
          and req.queries.get('get') == Result.Ok('remotesinfo')
      },
      then: fn move (_) {
        let cmd = states.get(index := index + 1).or_panic
        let root = Map.new
        let remote = Map.new

        remote.set('timestamp', Json.Int(cmd.timestamp))
        remote.set('lastcmd', Json.Int(cmd.to_int))
        root.set('office', Json.Object(remote))
        Response.ok(Json.Object(root).to_string.to_byte_array)
      },
    )

    driver
  }

  let itho = recover Itho.new(Client.with_driver(driver as Driver))
  let input = Input.new(state, logger, itho, id: 'office')

  input.add_button(
    'timer1',
    recover Button.new(rooms: ['office'], duration: Duration.from_secs(0)),
  )

  input
}

fn run(input: Input) {
  input.run_iteration

  match Future.new {
    case (future, promise) -> {
      input.wait(promise)
      future.get
    }
  }
}

fn pub tests(t: mut Tests) {
  t.test('The initial remote state is ignored', fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, states: recover [RemoteState.Timer1(123)])

    run(input)
    t.equal(
      Snapshot.of(state).rooms.get('office').or_panic.status,
      Status.Default,
    )
  })

  t.test('The state is ignored if the timestamp remains the same', fn (t) {
    let state = state(allow_api_calls)
    let input = input(
      state,
      states: recover [RemoteState.Timer1(123), RemoteState.Timer1(123)],
    )

    run(input)
    run(input)
    t.equal(
      Snapshot.of(state).rooms.get('office').or_panic.status,
      Status.Default,
    )
  })

  t.test('Enabling ventilation in response to a button press', fn (t) {
    let state = state(allow_api_calls)
    let input = input(
      state,
      states: recover [RemoteState.Timer1(123), RemoteState.Timer1(456)],
    )

    run(input)
    run(input)
    t.equal(
      Snapshot.of(state).rooms.get('office').or_panic.status,
      Status.Button(Status.Default),
    )
  })

  t.test('Disabling ventilation when a button times out', fn (t) {
    let state = state(allow_api_calls)
    let input = input(
      state,
      states: recover {
        [
          RemoteState.Timer1(123),
          RemoteState.Timer1(456),
          RemoteState.Timer1(456),
        ]
      },
    )

    run(input)
    run(input)
    run(input)
    t.equal(
      Snapshot.of(state).rooms.get('office').or_panic.status,
      Status.Default,
    )
  })

  t.test('Resetting the remote in response to the "low" button', fn (t) {
    let state = state(allow_api_calls)
    let input = input(
      state,
      states: recover {
        [RemoteState.Timer1(123), RemoteState.Timer1(456), RemoteState.Low(789)]
      },
    )

    run(input)
    run(input)
    run(input)
    t.equal(
      Snapshot.of(state).rooms.get('office').or_panic.status,
      Status.Default,
    )
  })
}
