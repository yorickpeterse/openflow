import helpers::(Snapshot, allow_api_calls, state, NullWriter)
import openflow::http::(Client, Response, TestDriver)
import openflow::inputs::humidity::(Input, Sensor)
import openflow::itho::Itho
import openflow::logger::Logger
import openflow::metrics::Metrics
import openflow::state::(State, Status)
import openflow::sync::Waiter
import std::json::Json
import std::net::ip::IpAddress
import std::test::Tests
import std::time::Duration

impl Input {
  fn async mut run_iteration {
    iteration
  }

  fn async mut reset_low_time {
    @low_time = Duration.from_secs(0)
  }

  fn async mut reset_minimum_time {
    @minimum_time = Duration.from_secs(0)
  }

  fn async mut wait(waiter: uni Waiter) {
    waiter.notify
  }
}

fn input(state: State, humidity: uni Array[Int]) -> Input {
  let metrics = recover Metrics.new(IpAddress.v4(0, 0, 0, 0), port: 0)
  let logger = Logger.new(recover NullWriter {})
  let driver = recover TestDriver.new
  let mut index = 0

  driver.request(
    matches: fn (req) {
      req.path == '/api.html'
        and req.queries.opt('get') == Option.Some('ithostatus')
    },
    then: fn move (_) {
      let val = humidity.get(index := index + 1)
      let root = Map.new

      root.set('RH bathroom 1', Json.Int(val))
      Response.ok(Json.Object(root).to_string.to_byte_array)
    }
  )

  let itho = recover Itho.new(Client.with_driver(driver))
  let input = Input.new(state, logger, metrics, itho, low: 75, high: 80)

  input.add_sensor(recover Sensor.new('bathroom', id: 'RH bathroom 1'))
  input
}

fn run(input: Input) {
  let waiter = Waiter.new

  input.run_iteration
  input.wait(waiter.clone)
  waiter.wait
}

fn pub tests(t: mut Tests) {
  t.test('No ventilation is applied when the humidity is OK') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [70])

    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Default)
  }

  t.test('No ventilation is applied the first time humidity increases') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [82])

    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Default)
  }

  t.test('Ventilation is applied when a room is humid for too long') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [82, 82])

    run(input)
    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Humid)
  }

  t.test('Ventilation persists when the humidity decreases') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [82, 83, 73])

    run(input)
    run(input)
    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Humid)
  }

  t.test('Ventilation persists when the minimum amount of time has not yet passed') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [82, 83, 73])

    run(input)
    run(input)
    input.reset_low_time
    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Humid)
  }

  t.test('Ventilation is disabled after enough time has passed') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [82, 83, 73])

    run(input)
    run(input)
    input.reset_low_time
    input.reset_minimum_time
    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Default)
  }
}
