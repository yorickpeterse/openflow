import helpers (NullWriter, Snapshot, allow_api_calls, state)
import openflow.config (Humidity)
import openflow.http (Client, Driver, Response, TestDriver)
import openflow.inputs.humidity (Input, Samples, Sensor)
import openflow.itho (Itho)
import openflow.logger (Logger)
import openflow.metrics (Metrics)
import openflow.state (State, Status)
import openflow.sync (Waiter)
import std.io (Write)
import std.json (Json)
import std.net.ip (IpAddress)
import std.test (Tests)
import std.time (Duration)

impl Input {
  fn async mut run_iteration {
    iteration
  }

  fn async mut reset_low_time {
    @low_time = Duration.from_secs(0)
  }

  fn async mut wait(waiter: uni Waiter) {
    waiter.notify
  }
}

fn input(state: State, humidity: uni Array[Int], correction: Int) -> Input {
  let metrics = recover Metrics.new(IpAddress.v4(0, 0, 0, 0), port: 0)
  let logger = Logger.new(recover NullWriter() as Write)
  let driver = recover TestDriver.new
  let mut index = 0

  driver.request(
    matches: fn (req) {
      req.path == '/api.html'
        and req.queries.opt('get') == Option.Some('ithostatus')
    },
    then: fn move (_) {
      let val = humidity.get(index := index + 1)
      let root = Map.new

      root.set('RH bathroom 1', Json.Int(val))
      Response.ok(Json.Object(root).to_string.to_byte_array)
    },
  )

  let itho = recover Itho.new(Client.with_driver(driver as Driver))
  let conf = Humidity(
    high: 80,
    low: 75,
    max_increase: 15,
    correction: correction,
  )
  let input = Input.new(state, logger, metrics, itho, conf)

  input.add_sensor(recover Sensor.new('bathroom', id: 'RH bathroom 1'))
  input
}

fn run(input: Input) {
  let waiter = Waiter.new

  input.run_iteration
  input.wait(waiter.clone)
  waiter.wait
}

fn pub tests(t: mut Tests) {
  t.test('Samples.new', fn (t) {
    let buf = Samples.new(1)

    t.equal(buf.index, 0)
    t.equal(buf.values.size, 1)
  })

  t.test('Samples.push', fn (t) {
    let buf = Samples.new(2)

    t.equal(buf.push(10), 0)
    t.equal(buf.index, 1)

    t.equal(buf.push(20), 0)
    t.equal(buf.index, 0)

    t.equal(buf.values.get(0), 10)
    t.equal(buf.values.get(1), 20)

    t.equal(buf.push(30), 10)
    t.equal(buf.push(40), 20)
    t.equal(buf.values.get(0), 30)
    t.equal(buf.values.get(1), 40)
  })

  t.test('No ventilation is applied when the humidity is OK', fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [70], correction: 0)

    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Default)
  })

  t.test('Ventilation is applied when a room is humid for too long', fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [82, 82], correction: 0)

    run(input)
    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Humid)
  })

  t.test('Ventilation persists when the humidity decreases', fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [82, 83, 73], correction: 0)

    run(input)
    run(input)
    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Humid)
  })

  t.test(
    'Ventilation continues when humidity is high, even when too much time has passed',
    fn (t) {
      let state = state(allow_api_calls)
      let input = input(state, humidity: recover [85, 85, 85], correction: 0)

      run(input)
      run(input)
      run(input)
      t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Humid)
    },
  )

  t.test(
    'Ventilation stops when humidity is low enough and too much time has passed',
    fn (t) {
      let state = state(allow_api_calls)
      let input = input(
        state,
        humidity: recover [85, 85, 60, 60],
        correction: 0,
      )

      run(input)
      run(input)
      input.reset_low_time
      run(input) # Transitions the state to "drying"
      run(input) # Transitions the state to "dry"
      t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Default)
    },
  )

  t.test('Applying a humidity correction when the humidity is high', fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, humidity: recover [80, 80], correction: -10)

    run(input)
    run(input)
    t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Default)
  })

  t.test(
    'Handling increases in humidity after the humidity goes below the low threshold',
    fn (t) {
      let state = state(allow_api_calls)
      let input = input(
        state,
        humidity: recover [85, 85, 60, 77],
        correction: 0,
      )

      run(input)
      run(input)
      input.reset_low_time
      run(input) # Transitions the state to "drying"
      run(input) # Transitions the state to "humid" again
      t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Humid)
    },
  )

  t.test(
    'Ventilation is applied when the humidity increase is too big',
    fn (t) {
      let state = state(allow_api_calls)
      let input = input(
        state,
        humidity: recover {
          [
            55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 70, 70, 70, 70, 70, 70, 70,
            70, 70, 70, 70, 70, 30, 0,
          ]
        },
        correction: 0,
      )

      11.times(fn (_) { run(input) })
      t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Humid)

      11.times(fn (_) { run(input) })
      t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Humid)

      input.reset_low_time
      run(input)
      t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Default)

      run(input)
      t.equal(Snapshot.of(state).rooms.get('bathroom').status, Status.Default)
    },
  )
}
