import helpers::(Snapshot, allow_api_calls, state, NullWriter)
import openflow::http::(Client, Response, TestDriver)
import openflow::hue::Hue
import openflow::inputs::motion::(Input, Sensor)
import openflow::logger::Logger
import openflow::metrics::Metrics
import openflow::state::(State, Status)
import openflow::sync::Waiter
import std::json::Json
import std::net::ip::IpAddress
import std::test::Tests
import std::time::Duration

impl Input {
  fn async mut run_iteration {
    iteration
  }

  fn async mut reset_motion_wait_time {
    @motion_wait_time = Duration.from_secs(0)
  }

  fn async mut reset_ventilation_timeout {
    @ventilation_timeout = Duration.from_secs(0)
  }

  fn async mut reset_pending_timeout {
    @pending_timeout = Duration.from_secs(0)
  }

  fn async mut wait(waiter: uni Waiter) {
    waiter.notify
  }
}

fn input(state: State, motion: uni Array[Bool]) -> Input {
  let metrics = recover Metrics.new(IpAddress.v4(0, 0, 0, 0), port: 0)
  let logger = Logger.new(recover NullWriter {})
  let driver = recover TestDriver.new
  let mut index = 0

  driver.request(
    matches: fn (req) { req.path == '/api/hunter2/sensors' },
    then: fn move (_) {
      let val = motion.get(index := index + 1)
      let root = Map.new
      let sensor = Map.new
      let state = Map.new

      state.set('presence', Json.Bool(val))
      sensor.set('type', Json.String('ZLLPresence'))
      sensor.set('state', Json.Object(state))
      root.set('1', Json.Object(sensor))
      Response.ok(Json.Object(root).to_string.to_byte_array)
    }
  )

  let hue = recover Hue.new(Client.with_driver(driver), user: 'hunter2')
  let input = Input.new(state, logger, metrics, hue)

  input.add_sensor(recover Sensor.new('office', id: 1))
  input
}

fn run(input: Input) {
  let waiter = Waiter.new

  input.run_iteration
  input.wait(waiter.clone)
  waiter.wait
}

fn pub tests(t: mut Tests) {
  t.test('Detection motion for the first time') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, motion: recover [true])

    run(input)
    t.equal(Snapshot.of(state).rooms.get('office').status, Status.Default)
  }

  t.test('Detection motion twice in a row') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, motion: recover [true, true])

    run(input)
    run(input)
    t.equal(Snapshot.of(state).rooms.get('office').status, Status.Default)
  }

  t.test('Detection motion without additional motion') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, motion: recover [true, false, true])

    run(input)
    input.reset_motion_wait_time
    input.reset_pending_timeout
    run(input)
    run(input)
    t.equal(Snapshot.of(state).rooms.get('office').status, Status.Default)
  }

  t.test('Enabling ventilation when enough motion is detected') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, motion: recover [true, true])

    run(input)
    input.reset_motion_wait_time
    run(input)
    t.equal(Snapshot.of(state).rooms.get('office').status, Status.Low)
  }

  t.test('Keeping ventilation enabled after no more motion is detected') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, motion: recover [true, true, false])

    run(input)
    input.reset_motion_wait_time
    run(input)
    run(input)
    t.equal(Snapshot.of(state).rooms.get('office').status, Status.Low)
  }

  t.test('Disabling ventilation after no motion is detected for long enough') fn (t) {
    let state = state(allow_api_calls)
    let input = input(state, motion: recover [true, true, false])

    run(input)
    input.reset_motion_wait_time
    run(input)
    input.reset_ventilation_timeout
    run(input)
    t.equal(Snapshot.of(state).rooms.get('office').status, Status.Default)
  }
}
