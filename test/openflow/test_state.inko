import helpers (Snapshot, allow_api_calls, state, state_with_rooms)
import openflow.config (Flow, Room as RoomConfig)
import openflow.http (Response, TestDriver)
import openflow.state (Status)
import std.sync (Future)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.test('Status.cmp', fn (t) {
    t.true(Status.Default == Status.Default)
    t.true(Status.Default < Status.Low)
    t.true(Status.Low == Status.Low)
    t.true(Status.Low < Status.Medium)
    t.true(Status.Medium > Status.Low)
    t.true(Status.Low < Status.Button(Status.Default))
    t.true(Status.Button(Status.Default) == Status.Button(Status.Default))
    t.true(Status.Button(Status.Default) < Status.Maximum)
    t.true(Status.Button(Status.Default) > Status.High)
    t.true(Status.Maximum == Status.Maximum)
    t.true(Status.Maximum < Status.Humid)
    t.true(Status.Maximum > Status.High)
    t.true(Status.Humid == Status.Humid)
    t.true(Status.Humid > Status.High)
  })

  t.test('State.prepare when manual control is disabled', fn (t) {
    let driver = recover TestDriver.new

    driver.request(
      matches: fn (req) { req.queries.opt('getsetting').some? },
      then: fn (_) { Response.ok('{"current":0}'.to_byte_array) },
    )

    let future = match Future.new {
      case (future, promise) -> {
        let mut prom_opt = recover Option.Some(promise)

        driver.request(
          matches: fn (req) { req.queries.opt('setsetting').some? },
          then: fn move (_) {
            (prom_opt := recover Option.None).get.set(true)
            Response.ok('OK'.to_byte_array)
          },
        )
        future
      }
    }

    let state = state(driver)

    state.prepare
    t.true(future.get)
  })

  t.test('State.prepare when manual control is enabled', fn (t) {
    let driver = recover TestDriver.new

    driver.request(
      matches: fn (req) { req.queries.opt('getsetting').some? },
      then: fn (_) { Response.ok('{"current":1}'.to_byte_array) },
    )

    let state = state(driver)

    # If a setsetting call _is_ performed, this message will panic. There's no
    # meaningful way to wait for this (without modifying the code just for our
    # tests), so instead we send a snapshot message and wait for that. This
    # works because messages are handled in FIFO order.
    state.prepare
    Snapshot.of(state)
  })

  t.test('State.update', fn (t) {
    let state = state(recover TestDriver.new)

    state.update(fn (rooms) {
      rooms.get_mut('living_room').update(Status.Low)
      false
    })

    let snap = Snapshot.of(state)
    let living = snap.rooms.get('living_room')

    t.equal(living.status, Status.Low)
  })

  t.test('State.update_with', fn (t) {
    let state = state(recover TestDriver.new)

    state.update_with(42, fn (rooms, _) {
      rooms.get_mut('living_room').update(Status.Low)
      false
    })

    let snap = Snapshot.of(state)
    let living = snap.rooms.get('living_room')

    t.equal(living.status, Status.Low)
  })

  t.test('State.apply with an Low status room', fn (t) {
    let state = state(allow_api_calls)

    state.update(fn (rooms) {
      rooms.get_mut('living_room').update(Status.Low)
      false
    })

    match Future.new {
      case (_, promise) -> state.apply(promise)
    }

    let snap = Snapshot.of(state)
    let living = snap.rooms.get('living_room')

    t.equal(snap.speed, 21)
    t.equal(living.status, Status.Low)
    t.equal(living.flow, 40)
    t.equal(living.exhaust, 2200)
  })

  t.test('State.apply with a Button status room', fn (t) {
    let state = state(allow_api_calls)

    state.update(fn (rooms) {
      rooms.get_mut('living_room').update(Status.Button(Status.Default))
      false
    })

    match Future.new {
      case (_, promise) -> state.apply(promise)
    }

    let snap = Snapshot.of(state)
    let office = snap.rooms.get('office')
    let living = snap.rooms.get('living_room')
    let bath = snap.rooms.get('bathroom')

    t.equal(snap.speed, 21)
    t.equal(living.status, Status.Button(Status.Default))
    t.equal(living.flow, 50)
    t.equal(living.exhaust, 2700)
    t.equal(bath.flow, 0)
    t.equal(bath.exhaust, 0)
    t.equal(office.flow, 22)
    t.equal(office.exhaust, 1200)
  })

  t.test('State.apply with a Humid status room', fn (t) {
    let state = state(allow_api_calls)

    state.update(fn (rooms) {
      rooms.get_mut('office').update(Status.Low)
      rooms.get_mut('living_room').update(Status.Humid)
      false
    })

    match Future.new {
      case (_, promise) -> state.apply(promise)
    }

    let snap = Snapshot.of(state)
    let living = snap.rooms.get('living_room')
    let office = snap.rooms.get('office')

    t.equal(snap.speed, 26)
    t.equal(living.status, Status.Humid)
    t.equal(living.flow, 70)
    t.equal(living.exhaust, 3100)
    t.equal(office.status, Status.Low)
    t.equal(office.flow, 22)
    t.equal(office.exhaust, 1000)
  })

  t.test(
    'State.apply with active ventilation below the default ventilation',
    fn (t) {
      let state = state(allow_api_calls)

      state.update(fn (rooms) {
        rooms.get_mut('office').update(Status.Low)
        false
      })

      match Future.new {
        case (_, promise) -> state.apply(promise)
      }

      t.equal(Snapshot.of(state).rooms.get('office').flow, 11)
    },
  )

  t.test('State.apply with a room exceeding its maximum flow', fn (t) {
    let state = state(allow_api_calls)

    state.update(fn (rooms) {
      rooms.get_mut('office').update(Status.High)
      false
    })

    match Future.new {
      case (_, promise) -> state.apply(promise)
    }

    t.equal(Snapshot.of(state).rooms.get('office').flow, 88)
  })

  t.test('State.apply with a total flow exceeding the maximum flow', fn (t) {
    let state = state(allow_api_calls)

    state.update(fn (rooms) {
      rooms.get_mut('super_fast').update(Status.Maximum)
      false
    })

    match Future.new {
      case (_, promise) -> state.apply(promise)
    }

    let snap = Snapshot.of(state)
    let fast = snap.rooms.get('super_fast')
    let office = snap.rooms.get('office')

    t.equal(snap.speed, 100)
    t.equal(fast.status, Status.Maximum)
    t.equal(fast.flow, 350)
    t.equal(fast.exhaust, 4000)
    t.equal(office.status, Status.Default)
    t.equal(office.flow, 11)
    t.equal(office.exhaust, 200)
  })

  # This test is based on a bug I ran into at home, which requires a
  # configuration different from the default test configuration to manifest
  # itself..
  t.test('State.apply with excessive, default and active ventilation', fn (t) {
    let state = state_with_rooms(
      allow_api_calls,
      [
        RoomConfig(
          name: 'living_room',
          exhaust: 10,
          flow: Flow(
            correction: 1.05,
            minimum: 0,
            maximum: 70,
            default: 40,
            low: 40,
            medium: 50,
            medium_high: 65,
            button: 70,
            high: 75,
          ),
          motion: Option.None,
          humidity: Option.None,
          co2: Option.None,
          co2_minimum: Option.None,
        ),
        RoomConfig(
          name: 'kitchen',
          exhaust: 11,
          flow: Flow(
            correction: 1.05,
            minimum: 0,
            maximum: 80,
            default: 0,
            low: 40,
            medium: 50,
            medium_high: 65,
            high: 75,
            button: 80,
          ),
          motion: Option.None,
          humidity: Option.None,
          co2: Option.None,
          co2_minimum: Option.None,
        ),
        RoomConfig(
          name: 'office',
          exhaust: 15,
          flow: Flow(
            correction: 1.0,
            minimum: 0,
            maximum: 80,
            default: 20,
            low: 40,
            medium: 60,
            medium_high: 65,
            high: 75,
            button: 80,
          ),
          motion: Option.None,
          humidity: Option.None,
          co2: Option.None,
          co2_minimum: Option.None,
        ),
        RoomConfig(
          name: 'bedroom',
          exhaust: 15,
          flow: Flow(
            correction: 1.05,
            minimum: 0,
            maximum: 80,
            default: 15,
            low: 20,
            medium: 50,
            medium_high: 65,
            high: 75,
            button: 80,
          ),
          motion: Option.None,
          humidity: Option.None,
          co2: Option.None,
          co2_minimum: Option.None,
        ),
        RoomConfig(
          name: 'bathroom',
          exhaust: 15,
          flow: Flow(
            correction: 1.10,
            minimum: 10,
            maximum: 120,
            default: 0,
            low: 40,
            medium: 50,
            medium_high: 65,
            high: 75,
            button: 120,
          ),
          motion: Option.None,
          humidity: Option.None,
          co2: Option.None,
          co2_minimum: Option.None,
        ),
      ],
    )

    state.update(fn (rooms) {
      rooms.get_mut('living_room').update(Status.Default)
      rooms.get_mut('kitchen').update(Status.Default)
      rooms.get_mut('bathroom').update(Status.Default)
      rooms.get_mut('office').update(Status.Medium)
      rooms.get_mut('bedroom').update(Status.Low)
      false
    })

    match Future.new {
      case (_, promise) -> state.apply(promise)
    }

    let snap = Snapshot.of(state)
    let living = snap.rooms.get('living_room')
    let kitchen = snap.rooms.get('kitchen')
    let bath = snap.rooms.get('bathroom')
    let office = snap.rooms.get('office')
    let bed = snap.rooms.get('bedroom')

    t.equal(snap.speed, 26)
    t.equal(living.flow, 0)
    t.equal(kitchen.flow, 0)
    t.equal(bath.flow, 11)
    t.equal(office.flow, 60)
    t.equal(bed.flow, 21)
  })

  t.test('State.apply with remaining ventilation', fn (t) {
    let state = state(allow_api_calls)

    match Future.new {
      case (_, promise) -> state.apply(promise)
    }

    let snap = Snapshot.of(state)
    let office = snap.rooms.get('office')
    let bath = snap.rooms.get('bathroom')

    t.equal(office.flow, 22)
    t.equal(bath.flow, 10)
  })
}
