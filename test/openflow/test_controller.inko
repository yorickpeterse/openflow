import openflow::clock::(Clock, TestClock)
import openflow::config::(
  Button, Co2, Config, Exhaust, Humidity, Metrics, Motion, Room, Remote,
  Schedule
)
import openflow::controller::Controller
import openflow::http::(Client, Request, Response, TestDriver)
import openflow::hue::Hue
import openflow::itho::Itho
import openflow::logger::Logger
import openflow::room::State
import std::io::Write
import std::json::Json
import std::net::ip::IpAddress
import std::set::Set
import std::test::Tests
import std::time::(DateTime, Duration, Instant)

class CycleClock {
  let @index: Int

  fn static new -> CycleClock {
    CycleClock { @index = 0 }
  }
}

impl Clock for CycleClock {
  fn pub mut now -> DateTime {
    let hour = if @index == 0 {
      @index = 1
      2
    } else {
      @index = 0
      14
    }

    DateTime {
      @year = 2023,
      @month = 1,
      @day = 12,
      @hour = hour,
      @minute = 4,
      @second = 2,
      @sub_second = 0.0,
      @utc_offset = 0,
    }
  }
}

let SPEED = 124

class NullWriter {}

impl Write for NullWriter {
  fn pub mut write_bytes(bytes: ref ByteArray) -> Int {
    0
  }

  fn pub mut write_string(string: String) -> Int {
    0
  }

  fn pub mut flush {}
}

fn config -> Config {
  Config {
    @rooms = [
      Room {
        @name = 'living_room',
        @exhaust = 12,
        @schedule = Option.None,
        @motion = Option.Some(Motion {
          @id = 1,
          @minutes = 5,
          @time = Duration.from_secs(10),
        }),
        @humidity = Option.None,
        @ping = [],
        @minimum_flow = 0,
        @flow = 15,
        @max_co2_flow = 30,
        @flow_correction = 1.0,
        @ventilation_time = Duration.from_secs(10),
        @co2 = true,
      },
      Room {
        @name = 'bedroom',
        @exhaust = 13,
        @schedule = Option.Some(Schedule.Night),
        @motion = Option.None,
        @humidity = Option.None,
        @ping = [],
        @minimum_flow = 0,
        @flow = 60,
        @max_co2_flow = 100,
        @flow_correction = 1.0,
        @ventilation_time = Duration.from_secs(10),
        @co2 = true,
      },
      Room {
        @name = 'bathroom',
        @exhaust = 14,
        @schedule = Option.None,
        @motion = Option.Some(Motion {
          @id = 2,
          @minutes = 5,
          @time = Duration.from_secs(10),
        }),
        @humidity = Option.Some('RH foo'),
        @ping = [],
        @minimum_flow = 0,
        @flow = 50,
        @max_co2_flow = 150,
        @flow_correction = 1.0,
        @ventilation_time = Duration.from_secs(10),
        @co2 = true,
      },
      Room {
        @name = 'office',
        @exhaust = 15,
        @schedule = Option.None,
        @motion = Option.Some(Motion {
          @id = 3,
          @minutes = 5,
          @time = Duration.from_secs(10),
        }),
        @humidity = Option.None,
        @ping = [],
        @minimum_flow = 0,
        @flow = 15,
        @max_co2_flow = 30,
        @flow_correction = 1.1,
        @ventilation_time = Duration.from_secs(10),
        @co2 = false,
      },
    ]
      .into_iter
      .reduce(Map.new) fn (map, room) {
        map[room.name] = room
        map
      },
    @remote = Option.None,
    @humidity = Humidity {
      @high = 75,
      @low = 70,
      @low_time = Duration.from_secs(1),
      @high_time = Duration.from_secs(1),
      @min_time = Duration.from_secs(1),
      @flow = 150,
    },
    @exhaust = Exhaust {
      @manual_setting = 111,
      @speed_setting = SPEED,
      @min_flow = 90,
      @max_flow = 350,
      @close_time = Duration.from_secs(0),
      @reduce_wait_time = Duration.from_secs(60),
    },
    @itho_wifi_address = recover IpAddress.v4(192, 0, 0, 1),
    @hue_address = recover IpAddress.v4(192, 0, 0, 2),
    @hue_user = 'foo',
    @co2 = Co2 {
      @target = 700,
      @high = 1000,
      @metrics_interval = Duration.from_secs(60),
      @sample_interval = Duration.from_secs(1800),
      @half_sample_interval = Duration.from_secs(900),
      @closed_sample_interval = Duration.from_secs(10800),
      @sample_time = Duration.from_secs(900),
      @sample_wait_time = Duration.from_secs(0),
    },
    @metrics = Metrics {
      @ip = IpAddress.v4(0, 0, 0, 0),
      @port = 8089
    },
  }
}

fn controller(
  config: Config,
  itho_driver: TestDriver,
  hue_driver: TestDriver,
  clock: Clock,
) -> Controller {
  let itho = Itho.new(Client.with_driver(itho_driver))
  let hue = Hue.new(Client.with_driver(hue_driver), user: 'foo')
  let logger = Logger.new(NullWriter {})

  Controller.new(config, itho, hue, clock, logger)
}

fn itho(co2: Int, humidity: Int) -> TestDriver {
  let driver = TestDriver.new

  driver.request(
    matches: fn (req) {
      match req.queries.get('get') {
        case Some('ithostatus') -> true
        case _ -> false
      }
    },
    then: fn (_) {
      Response.ok(
        "\{ \"CO2 plenum (ppm)\": {co2}, \"RH foo\": {humidity} }".to_byte_array
      )
    }
  )

  driver
}

fn track_settings(driver: mut TestDriver) -> Array[(Int, Int)] {
  let updates = []

  driver.request(
    matches: fn (req) { req.queries.get('setsetting').some? },
    then: fn (req) {
      updates.push(
        (
          Int.from_base10(req.queries['setsetting']).unwrap_or(0),
          Int.from_base10(req.queries['value']).unwrap_or(0),
        )
      )
      Response.ok('OK'.to_byte_array)
    }
  )

  updates
}

fn hue -> TestDriver {
  let driver = TestDriver.new

  driver.request(
    matches: fn (req) { req.path == '/api/foo/sensors' },
    then: fn (_) {
      Response.ok(
        '
        {
          "1": { "type": "ZLLPresence", "state": { "presence": false } },
          "2": { "type": "ZLLPresence", "state": { "presence": false } },
          "3": { "type": "ZLLPresence", "state": { "presence": true } },
          "4": {
            "type": "ZLLSwitch",
            "state": {
              "buttonevent": 1002,
              "lastupdated": "2023-02-16T14:10:22"
            }
          }
        }
        '.to_byte_array
      )
    }
  )

  driver
}

fn hour(hour: Int) -> TestClock {
  TestClock.new(DateTime {
    @year = 2023,
    @month = 1,
    @day = 12,
    @hour = hour,
    @minute = 4,
    @second = 2,
    @sub_second = 0.0,
    @utc_offset = 0,
  })
}

fn remote(time: Duration) -> Remote {
  let buttons = Map.new

  buttons['cook30'] = Button { @rooms = ['living_room'], @time = time.clone }
  buttons['timer1'] = Button { @rooms = ['bathroom'], @time = time }
  Remote { @id = 'example', @buttons = buttons }
}

fn pub tests(t: mut Tests) {
  t.test('A room for which to enable a schedule') fn (t) {
    let itho = itho(co2: 700, humidity: 1)
    let updates = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(2))
    let room = ctl.rooms['bedroom']

    ctl.iteration

    t.equal(room.state, State.Schedule)
    t.true(updates.contains?((room.config.exhaust, room.exhaust)))
    t.true(updates.contains?((SPEED, 26)))
  }

  t.test('A room for which to enable a schedule when motion is detected') fn (t) {
    let itho = itho(co2: 700, humidity: 1)
    let updates = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(2))
    let room = ctl.rooms['bedroom']

    room.update(State.Motion(1, 1))
    ctl.iteration

    t.equal(room.state, State.Schedule)
    t.true(updates.contains?((room.config.exhaust, room.exhaust)))
    t.true(updates.contains?((SPEED, 26)))
  }

  t.test('A room with minimum ventilation for which to enable a schedule') fn (t) {
    let conf = config

    conf.rooms['bedroom'].minimum_flow = 10

    let itho = itho(co2: 700, humidity: 1)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(2))
    let room = ctl.rooms['bedroom']

    ctl.iteration

    t.equal(room.state, State.Schedule)
    t.true(updates.contains?((room.config.exhaust, room.exhaust)))
    t.true(updates.contains?((SPEED, 26)))
  }

  t.test('A room for which to disable a schedule') fn (t) {
    let itho = itho(co2: 700, humidity: 73)
    let updates = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['bedroom']

    room.state = State.Schedule
    room.exhaust = 500
    ctl.iteration

    t.equal(room.state, State.Closed)
    t.true(updates.contains?((room.config.exhaust, 0)))
    t.true(updates.contains?((SPEED, 26)))
  }

  t.test('A room that is already running a schedule') fn (t) {
    let itho = itho(co2: 700, humidity: 73)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(2))
    let room = ctl.rooms['bedroom']
    let before = Instant.new

    room.state = State.Schedule
    room.last_update = before.clone
    room.exhaust = 1389
    ctl.iteration

    t.equal(room.state, State.Schedule)
    t.equal(room.last_update, before)
  }

  t.test('First detecting an increase in humidity') fn (t) {
    let itho = itho(co2: 700, humidity: 80)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    ctl.iteration

    t.equal(room.state, State.MaybeHumid)
  }

  t.test('First detecting an increase in humidity when the exhaust is open') fn (t) {
    let itho = itho(co2: 700, humidity: 80)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    room.state = State.Open
    ctl.iteration

    t.equal(room.state, State.Open)
  }

  t.test('Detecting an increase in humidity a second time') fn (t) {
    let itho = itho(co2: 700, humidity: 80)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    ctl.iteration

    let update = room.last_update.clone

    ctl.iteration

    t.equal(room.state, State.MaybeHumid)
    t.equal(room.last_update, update)
  }

  t.test('A room that is becoming too humid') fn (t) {
    let conf = config

    conf.humidity.high_time = Duration.from_secs(0)

    let itho = itho(co2: 700, humidity: 80)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    room.state = State.MaybeHumid
    ctl.iteration

    t.equal(room.state, State.Humid)
    t.true(updates.contains?((room.config.exhaust, room.exhaust)))
    t.true(updates.contains?((SPEED, 43)))
  }

  t.test('A room that is too humid') fn (t) {
    let itho = itho(co2: 700, humidity: 80)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']
    let before = Instant.new + Duration.from_secs(10)

    room.state = State.Humid
    room.last_update = before.clone
    room.exhaust = 4000
    ctl.iteration

    t.equal(room.state, State.Humid)
    t.not_equal(room.last_update, before)
  }

  t.test('A room that was humid but not for long enough') fn (t) {
    # This covers both the cases of `humidity >= low` and `humidity < low`.
    [70, 60].into_iter.each fn (humidity) {
      let itho = itho(co2: 700, humidity: humidity)
      let _ = track_settings(itho)
      let ctl = controller(config, itho, hue, hour(14))
      let room = ctl.rooms['bathroom']

      room.state = State.MaybeHumid
      ctl.iteration

      t.equal(room.state, State.Closed)
    }
  }

  t.test('A room that has dried up') fn (t) {
    let conf = config

    conf.humidity.low_time = Duration.from_secs(0)
    conf.humidity.min_time = Duration.from_secs(0)

    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    room.state = State.Humid
    room.exhaust = 4000
    ctl.iteration

    t.equal(room.state, State.Open)
    t.equal(room.exhaust, 2300)
    t.true(updates.contains?((room.config.exhaust, room.exhaust)))
  }

  t.test('A room that has dried up but needs more ventilation time') fn (t) {
    let conf = config

    conf.humidity.low_time = Duration.from_secs(0)
    conf.humidity.min_time = Duration.from_secs(10)

    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    room.state = State.Humid
    room.exhaust = 4000
    ctl.iteration

    t.equal(room.state, State.Humid)
    t.equal(room.exhaust, 4000)
  }

  t.test('A room with increasing humidity after not enough time has passed') fn (t) {
    let itho = itho(co2: 700, humidity: 71)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    ctl.iteration

    t.equal(room.state, State.Closed)
  }

  t.test('A humid room reaching the low humidity threshold') fn (t) {
    let itho = itho(co2: 700, humidity: 71)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    room.update(State.Humid)

    let before = room.last_update.clone

    ctl.iteration

    t.equal(room.state, State.Humid)
    t.greater(room.last_update, before)
  }

  t.test('A dry room when the humidity levels are OK') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']
    let before = Instant.new + Duration.from_secs(10)

    room.state = State.Open
    room.last_update = before.clone
    room.exhaust = 2778
    ctl.iteration

    t.equal(room.state, State.Open)
    t.equal(room.last_update, before)
  }

  t.test('A room with motion detected for the first time') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['office']

    ctl.iteration

    t.equal(room.state, State.Motion(4, 1))
  }

  t.test('A room with motion detected that should start ventilation right away') fn (t) {
    let conf = config

    conf.rooms['office'].motion.as_mut.unwrap.minutes = 1

    let itho = itho(co2: 700, humidity: 65)
    let _ = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['office']

    ctl.iteration

    t.equal(room.state, State.Open)
  }

  t.test('A room with motion detected multiple times in the same minute') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['office']

    ctl.iteration
    ctl.iteration

    t.equal(room.state, State.Motion(4, 1))
  }

  t.test('A room with motion detected in two different minutes') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['office']

    room.state = State.Motion(3, 1)
    ctl.iteration

    t.equal(room.state, State.Motion(4, 2))
  }

  t.test('A room with enough motion events detected') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['office']

    room.state = State.Motion(3, 4)
    ctl.iteration

    t.equal(room.state, State.Open)
    t.true(updates.contains?((room.config.exhaust, room.exhaust)))
  }

  t.test('A room with motion while ventilation is already active') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['office']
    let before = Instant.new + Duration.from_secs(10)

    room.state = State.Open
    room.last_update = before.clone
    room.exhaust = 834
    ctl.iteration

    t.equal(room.state, State.Open)
    t.not_equal(room.last_update, before)
  }

  t.test('A room that is ventilated but is now vacant') fn (t) {
    let conf = config

    conf.rooms['bathroom'].ventilation_time = Duration.from_secs(0)

    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    room.state = State.Open
    room.exhaust = 2778
    ctl.iteration

    t.equal(room.state, State.Closed)
    t.equal(room.exhaust, 0)
    t.true(updates.contains?((room.config.exhaust, room.exhaust)))
  }

  t.test('A vacant room with an IP responding to a ping') fn (t) {
    let conf = config

    conf.rooms['bathroom'].ventilation_time = Duration.from_secs(0)
    conf.rooms['bathroom'].ping.push(IpAddress.v4(127, 0, 0, 1))

    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']
    let before = room.last_update.clone

    room.state = State.Open
    room.exhaust = 2300
    ctl.iteration

    t.equal(room.state, State.Open)
    t.not_equal(room.last_update, before)
    t.equal(room.exhaust, 2300)
  }

  t.test('A room with not enough motion events') fn (t) {
    let conf = config

    conf.rooms['bathroom'].motion.as_mut.unwrap.time = Duration.from_secs(0)

    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    room.state = State.Motion(1, 1)
    ctl.iteration

    t.equal(room.state, State.Closed)
  }

  t.test('Ventilating the first room when no other rooms need ventilation') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['living_room']

    ctl.iteration

    t.equal(room.state, State.Default)
    t.equal(room.exhaust, 700)
    t.true(updates.contains?((room.config.exhaust, room.exhaust)))
  }

  t.test('The first room is not ventilated when another room needs ventilation') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let _ = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(2))

    ctl.iteration

    t.equal(ctl.rooms['living_room'].state, State.Closed)
  }

  t.test('The first room is closed when another room needs ventilating') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let living_room = ctl.rooms['living_room']
    let bedroom = ctl.rooms['bedroom']

    ctl.iteration
    t.equal(living_room.state, State.Default)

    bedroom.update(State.Open)
    ctl.iteration

    t.equal(living_room.state, State.Closed)
    t.equal(bedroom.state, State.Open)
    t.true(updates.contains?((bedroom.config.exhaust, bedroom.exhaust)))
    t.true(updates.contains?((living_room.config.exhaust, 0)))
  }

  t.test('Updating the exhaust settings') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(2))
    let room = ctl.rooms['bedroom']

    ctl.iteration

    t.equal(updates, [(room.config.exhaust, room.exhaust), (SPEED, 26)])
  }

  t.test('Adjusting ventilation based on the CO2 levels') fn (t) {
    let conf = config

    conf.co2.sample_time = Duration.from_secs(0)
    conf.co2.sample_interval = Duration.from_secs(0)
    conf.exhaust.reduce_wait_time = Duration.from_secs(0)

    let itho = itho(co2: 1200, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(2))
    let bedroom = ctl.rooms['bedroom']
    let office = ctl.rooms['office']

    bedroom.update(State.Open)
    office.update(State.Open)

    ctl.iteration # This iteration schedules the rooms

    t.equal(
      updates,
      [
        (bedroom.config.exhaust, 2700)
        (office.config.exhaust, 800),
        (SPEED, 26)
      ]
    )

    updates.clear
    ctl.iteration # This iteration processes the first room

    t.true(match bedroom.state { case Co2(Open) -> true, case _ -> false })
    t.equal(updates, [(office.config.exhaust, 0)])

    updates.clear
    ctl.iteration # This iteration applies the CO2 changes

    t.equal(bedroom.state, State.Open)
    t.equal(bedroom.co2.value, 1200)
    t.equal(office.co2.value, 0)
    t.equal(
      updates,
      [
        (bedroom.config.exhaust, 3500),
        (office.config.exhaust, 600),
        (SPEED, 34)
      ]
    )
  }

  t.test('Ignoring motion events when sampling CO2 levels') fn (t) {
    let conf = config

    conf.co2.sample_time = Duration.from_secs(0)
    conf.co2.sample_interval = Duration.from_secs(0)
    conf.exhaust.reduce_wait_time = Duration.from_secs(0)

    let itho = itho(co2: 1200, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(2))
    let office = ctl.rooms['office']

    ctl.iteration
    ctl.iteration
    office.update(State.Closed)
    ctl.iteration

    t.equal(office.state, State.Closed)
  }

  t.test('Sampling of CO2 levels when only two rooms are ventilated') fn (t) {
    let conf = config

    conf.co2.sample_time = Duration.from_secs(0)
    conf.co2.sample_wait_time = Duration.from_secs(0)
    conf.co2.half_sample_interval = Duration.from_secs(0)

    let itho = itho(co2: 1200, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let living_room = ctl.rooms['living_room']
    let bathroom = ctl.rooms['bathroom']

    living_room.update(State.Open)
    bathroom.update(State.Open)

    ctl.iteration # Schedule the rooms

    t.equal(
      updates,
      [
        (living_room.config.exhaust, 700)
        (bathroom.config.exhaust, 2300),
        (SPEED, 26)
      ]
    )

    updates.clear
    ctl.iteration # Process a room

    t.equal(updates, [(living_room.config.exhaust, 0)])
    t.true(match bathroom.state { case Co2(Open) -> true, case _ -> false })

    updates.clear
    ctl.iteration # Process another room

    t.equal(
      updates,
      [(living_room.config.exhaust, 700), (bathroom.config.exhaust, 0)]
    )
    t.true(match living_room.state { case Co2(Open) -> true, case _ -> false })
  }

  t.test('Sampling of CO2 levels for a room with minimum ventilation') fn (t) {
    let conf = config

    conf.co2.sample_interval = Duration.from_secs(0)

    let itho = itho(co2: 1200, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let bedroom = ctl.rooms['bedroom']

    bedroom.update(State.Minimum)
    ctl.iteration
    ctl.iteration

    t.equal(bedroom.state, State.Minimum)
  }

  t.test('Sampling of CO2 levels while waiting for them to stabilise') fn (t) {
    let conf = config

    conf.co2.sample_time = Duration.from_secs(0)
    conf.co2.sample_interval = Duration.from_secs(0)
    conf.co2.sample_wait_time = Duration.from_secs(10)

    let itho = itho(co2: 1200, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(2))
    let bedroom = ctl.rooms['bedroom']

    bedroom.update(State.Open)
    ctl.iteration # Schedule
    updates.clear

    ctl.iteration # Process
    updates.clear

    ctl.iteration # Apply changes

    t.equal(bedroom.co2.value, 0)
    t.equal(updates, [])
  }

  t.test('No extra flow is added when a room is humid') fn (t) {
    let conf = config

    conf.co2.sample_time = Duration.from_secs(0)
    conf.humidity.high_time = Duration.from_secs(0)

    let itho = itho(co2: 1200, humidity: 80)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(2))
    let bathroom = ctl.rooms['bathroom']
    let bedroom = ctl.rooms['bedroom']

    bathroom.state = State.Humid
    bathroom.exhaust = 3400
    ctl.iteration

    t.equal(updates, [(bedroom.config.exhaust, 700), (SPEED, 52)])
  }

  t.test('The exhaust speed is limited to the maximum flow') fn (t) {
    let conf = config

    conf.exhaust.min_flow = 10
    conf.exhaust.max_flow = 30

    let itho = itho(co2: 700, humidity: 60)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(2))
    let bedroom = ctl.rooms['bedroom']

    ctl.iteration

    t.equal(updates, [(bedroom.config.exhaust, 4000), (SPEED, 100)])
  }

  t.test('The exhaust speed is always greater than the minimum flow') fn (t) {
    let conf = config

    conf.rooms['bedroom'].flow = 5

    let itho = itho(co2: 700, humidity: 60)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(2))
    let bedroom = ctl.rooms['bedroom']

    ctl.iteration

    t.equal(updates, [(bedroom.config.exhaust, 100), (SPEED, 26)])
  }

  t.test('The exhaust is only updated when there is a speed change') fn (t) {
    let itho = itho(co2: 700, humidity: 60)
    let updates = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(2))
    let bedroom = ctl.rooms['bedroom']

    ctl.iteration
    ctl.iteration

    t.equal(updates, [(bedroom.config.exhaust, 1400), (SPEED, 26)])
  }

  t.test('The exhaust speed is only reduced after a period of time') fn (t) {
    let itho = itho(co2: 700, humidity: 80)
    let updates = track_settings(itho)
    let clock = CycleClock.new
    let ctl = controller(config, itho, hue, clock)
    let bedroom = ctl.rooms['bedroom']
    let bathroom = ctl.rooms['bathroom']

    bathroom.state = State.Humid
    bathroom.exhaust = 4000
    ctl.iteration
    ctl.iteration

    t.equal(
      updates,
      [
        (bedroom.config.exhaust, 700),
        (bathroom.config.exhaust, 3400),
        (SPEED, 52),
        (bedroom.config.exhaust, 0),
        (bathroom.config.exhaust, 4000),
      ]
    )
  }

  t.test('Detecting motion in a room that has default ventilation applied') fn (t) {
    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(config, itho, hue, hour(14))
    let room = ctl.rooms['office']

    room.state = State.Default
    room.exhaust = 356
    ctl.iteration

    t.equal(room.state, State.Open)
    t.equal(room.exhaust, 800)
  }

  t.test('Handling a room with a motion time equal to the ventilation time') fn (t) {
    let conf = config

    conf.rooms['bathroom'].ventilation_time = Duration.from_secs(0)
    conf.rooms['bathroom'].motion.as_mut.unwrap.time = Duration.from_secs(0)

    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    room.state = State.Motion(4, 1)

    ctl.iteration

    t.equal(room.state, State.Closed)
  }

  t.test('Ventilating a room with a minimum flow') fn (t) {
    let conf = config

    conf.rooms['bathroom'].minimum_flow = 10

    let itho = itho(co2: 700, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    ctl.iteration

    t.equal(room.state, State.Minimum)
    t.true(updates.contains?((room.config.exhaust, 500)))
  }

  t.test('Ventilating a room with a minimum flow with high CO2 levels') fn (t) {
    let conf = config

    conf.rooms['bathroom'].minimum_flow = 10

    let itho = itho(co2: 900, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    ctl.iteration

    t.equal(room.state, State.Minimum)
    t.true(updates.contains?((room.config.exhaust, 500)))
  }

  t.test('Rooms using the morning schedule are not sampled') fn (t) {
    let conf = config

    conf.co2.sample_time = Duration.from_secs(0)
    conf.co2.sample_interval = Duration.from_secs(0)
    conf.co2.sample_wait_time = Duration.from_secs(0)
    conf.rooms['bathroom'].schedule = Option.Some(Schedule.Morning)

    let itho = itho(co2: 1200, humidity: 65)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(6))
    let bedroom = ctl.rooms['bedroom']
    let bathroom = ctl.rooms['bathroom']

    bathroom.update(State.Schedule)
    bedroom.update(State.Open)

    ctl.iteration # Schedule the rooms to sample
    ctl.iteration # Pick up a room to sample

    t.true(match bedroom.state { case Co2(Open) -> true, case _ -> false })
    t.equal(bathroom.state, State.Schedule)
  }

  t.test('Detecting motion in a room with a minimum flow') fn (t) {
    let conf = config

    conf.rooms['bathroom'].minimum_flow = 10
    conf.rooms['bathroom'].motion.as_mut.unwrap.id = 3

    let itho = itho(co2: 700, humidity: 65)
    let _ = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    ctl.iteration

    t.equal(room.exhaust, 500)
    t.equal(room.state, State.Motion(4, 1))
  }

  t.test('Ventilating a room with a minimum flow with increasing humidity') fn (t) {
    let conf = config

    conf.rooms['bathroom'].minimum_flow = 10

    let itho = itho(co2: 700, humidity: 77)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    ctl.iteration

    t.equal(room.state, State.MaybeHumid)
    t.equal(room.exhaust, 500)
    t.true(updates.contains?((room.config.exhaust, 500)))
  }

  t.test('Ventilating a room with a minimum flow that is too humid') fn (t) {
    let conf = config

    conf.rooms['bathroom'].minimum_flow = 10
    conf.humidity.high_time = Duration.from_secs(0)

    let itho = itho(co2: 700, humidity: 77)
    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['bathroom']

    ctl.iteration
    ctl.iteration

    t.equal(room.state, State.Humid)
    t.equal(room.exhaust, 4000)
    t.true(updates.contains?((room.config.exhaust, 4000)))
  }

  t.test('Handling a non-default button state when starting up') fn (t) {
    let conf = config

    conf.remote = Option.Some(remote(Duration.from_secs(5)))

    let itho = itho(co2: 700, humidity: 70)

    itho.request(
      matches: fn (req) {
        match req.queries.get('get') {
          case Some('remotesinfo') -> true
          case _ -> false
        }
      },
      then: fn (_) {
        Response.ok('{"example": {"timestamp":123,"lastcmd":13}}'.to_byte_array)
      }
    )

    let _ = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['living_room']

    ctl.iteration

    t.equal(room.state, State.Default)
  }

  t.test('Ignoring unsupported remote states') fn (t) {
    let conf = config

    conf.remote = Option.Some(remote(Duration.from_secs(5)))

    let itho = itho(co2: 700, humidity: 70)

    itho.request(
      matches: fn (req) {
        match req.queries.get('get') {
          case Some('remotesinfo') -> true
          case _ -> false
        }
      },
      then: fn (_) {
        Response.ok('{"example": {"timestamp":123,"lastcmd":0}}'.to_byte_array)
      }
    )

    let _ = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['living_room']

    ctl.iteration

    t.equal(room.state, State.Default)
  }

  t.test('Ventilating a room in response to a remote') fn (t) {
    let conf = config

    conf.remote = Option.Some(remote(Duration.from_secs(5)))

    let itho = itho(co2: 700, humidity: 70)

    itho.request(
      matches: fn (req) {
        match req.queries.get('get') {
          case Some('remotesinfo') -> true
          case _ -> false
        }
      },
      then: fn (_) {
        let time = Instant.new.to_int
        let body = "\{\"example\": \{\"timestamp\":{time},\"lastcmd\":13}}"

        Response.ok(body.to_byte_array)
      }
    )

    let updates = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['living_room']

    ctl.iteration
    ctl.iteration

    t.equal(room.state, State.Button(State.Default))
    t.true(updates.contains?((room.config.exhaust, 700)))
  }

  t.test('Changing which rooms to ventilate in response to a remote') fn (t) {
    let conf = config

    conf.remote = Option.Some(remote(Duration.from_secs(5)))

    let itho = itho(co2: 700, humidity: 70)
    let counts = [true]

    itho.request(
      matches: fn (req) {
        match req.queries.get('get') {
          case Some('remotesinfo') -> true
          case _ -> false
        }
      },
      then: fn (_) {
        let body = match counts.length {
          case 1 -> '{"example": {"timestamp":1,"lastcmd":0}}'
          case 2 -> '{"example": {"timestamp":2,"lastcmd":13}}'
          case _ -> '{"example": {"timestamp":3,"lastcmd":8}}'
        }

        counts.push(true)
        Response.ok(body.to_byte_array)
      }
    )

    let _ = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room1 = ctl.rooms['living_room']
    let room2 = ctl.rooms['bathroom']

    ctl.iteration

    ctl.iteration
    t.equal(room1.state, State.Button(State.Default))

    ctl.iteration
    t.equal(room1.state, State.Closed)
    t.equal(room2.state, State.Button(State.Closed))
  }

  t.test('Stopping ventilation when a remote timer expires') fn (t) {
    let conf = config

    conf.remote = Option.Some(remote(Duration.from_secs(0)))

    let itho = itho(co2: 700, humidity: 70)
    let counts = [true]

    itho.request(
      matches: fn (req) {
        match req.queries.get('get') {
          case Some('remotesinfo') -> true
          case _ -> false
        }
      },
      then: fn (_) {
        let body = match counts.length {
          case 1 -> '{"example": {"timestamp":1,"lastcmd":0}}'
          case _ -> '{"example": {"timestamp":2,"lastcmd":13}}'
        }

        counts.push(true)
        Response.ok(body.to_byte_array)
      }
    )

    let _ = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let room = ctl.rooms['living_room']

    ctl.iteration

    ctl.iteration
    t.equal(room.state, State.Button(State.Default))

    # This disables the ventilation in response to the timer expiring.
    ctl.iteration
    t.equal(room.state, State.Default)

    # This is to ensure the ventilation remains disabled.
    ctl.iteration
    t.equal(room.state, State.Default)
  }

  t.test('Scheduling rooms for initial CO2 sampling') fn (t) {
    let itho = itho(co2: 700, humidity: 65)

    itho.request(
      matches: fn (r) { r.queries.get('getsetting') == Option.Some('111') },
      then: fn (_) { Response.ok('{"current":1}'.to_byte_array) }
    )

    let conf = config

    conf.co2.sample_time = Duration.from_secs(0)
    conf.co2.sample_wait_time = Duration.from_secs(0)

    let _ = track_settings(itho)
    let ctl = controller(conf, itho, hue, hour(14))
    let living_room = ctl.rooms['living_room']
    let bedroom = ctl.rooms['bedroom']
    let bathroom = ctl.rooms['bathroom']

    ctl.prepare

    t.equal(living_room.state, State.ScheduleCo2)
    t.equal(bedroom.state, State.ScheduleCo2)
    t.equal(bathroom.state, State.ScheduleCo2)

    ctl.iteration

    t.equal(living_room.state, State.ScheduleCo2)
    t.equal(bedroom.state, State.ScheduleCo2)
    t.true(match bathroom.state { case Co2(Closed) -> true, case _ -> false })

    ctl.iteration

    t.equal(living_room.state, State.ScheduleCo2)
    t.true(match bedroom.state { case Co2(Closed) -> true, case _ -> false })
    t.equal(bathroom.state, State.Closed)

    ctl.iteration

    t.true(match living_room.state { case Co2(Closed) -> true, case _ -> false })
    t.equal(bedroom.state, State.Closed)

    ctl.iteration
    t.equal(living_room.state, State.Default)
  }
}
