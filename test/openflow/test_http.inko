import openflow.http (DefaultDriver, Request, Response, TestDriver)
import std.net.ip (IpAddress)
import std.net.socket (TcpServer)
import std.test (Tests)

class async Server {
  fn async accept(socket: uni TcpServer) {
    socket
      .accept
      .then(fn (client) {
        client.write_string('HTTP/1.1 200 OK\r\nContent-Length: 2\r\n\r\nOK')
      })
      .get
  }
}

fn pub tests(t: mut Tests) {
  t.test('TestDriver.execute without a registered handler', fn (t) {
    let driver = TestDriver.new
    let request = Request.get('/foo')

    t.true(driver.execute(request).error?)
  })

  t.test('TestDriver.exectue without any matching handlers', fn (t) {
    let driver = TestDriver.new
    let request = Request.get('/foo')

    driver.request(
      matches: fn (r) { false },
      then: fn (r) { Response.ok(ByteArray.new) },
    )

    t.true(driver.execute(request).error?)
  })

  t.test('TestDriver.execute with a matching handler', fn (t) {
    let driver = TestDriver.new
    let request = Request.get('/foo')

    driver.request(
      matches: fn (r) { r.path == '/foo' },
      then: fn (r) { Response.ok('foo'.to_byte_array) },
    )

    let response = driver.execute(request).get

    t.equal(response.body, 'foo'.to_byte_array)
  })

  t.test('DefaultDriver.execute', fn (t) {
    let ip = recover IpAddress.v4(127, 0, 0, 1)
    let socket = recover TcpServer.new(ip.clone, port: 0).get
    let port = socket.local_address.get.port
    let driver = DefaultDriver.new(ip, port)

    Server {}.accept(socket)

    let request = Request.get('/')
    let response = driver.execute(request).get

    t.equal(response.body.to_string, 'OK')
    t.equal(response.headers.get('content-length'), '2')
    t.equal(response.status, 200)
    t.equal(response.version.major, 1)
    t.equal(response.version.minor, 1)
  })
}
