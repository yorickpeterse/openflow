import openflow.config (Flow, Itho as IthoConfig, Room as RoomConfig)
import openflow.http (Client, Driver, Response, TestDriver)
import openflow.itho (Itho)
import openflow.logger (Logger)
import openflow.metrics (Metrics)
import openflow.state (Room, State, Status)
import std.net.ip (IpAddress)
import std.sync (Future, Promise)

type pub inline RoomSnapshot {
  let pub @status: Status
  let pub @flow: Int
  let pub @exhaust: Int
}

type pub inline Snapshot {
  let pub @speed: Int
  let pub @rooms: Map[String, RoomSnapshot]

  fn pub static of(state: State) -> Snapshot {
    match Future.new {
      case (future, promise) -> {
        state.snapshot(promise)
        future.get
      }
    }
  }
}

impl Room {
  fn snapshot -> RoomSnapshot {
    RoomSnapshot(
      status: @status.clone,
      exhaust: @exhaust_value,
      flow: @current_flow,
    )
  }
}

impl State {
  fn pub async snapshot(promise: uni Promise[uni Snapshot]) {
    let rooms = @rooms.iter.reduce(recover Map.new, fn (map, entry) {
      recover {
        let map = recover map

        map.set(entry.key, recover entry.value.snapshot)
        map
      }
    })

    promise.set(recover Snapshot(speed: @speed, rooms: rooms))
  }
}

fn pub state(driver: uni TestDriver) -> State {
  let rooms = [
    RoomConfig(
      name: 'living_room',
      exhaust: 10,
      flow: Flow(
        correction: 1.0,
        minimum: 0,
        maximum: 70,
        default: 0,
        low: 40,
        medium: 50,
        medium_high: 65,
        high: 75,
        button: 50,
      ),
      motion: Option.None,
      humidity: Option.None,
      co2: Option.None,
      co2_minimum: Option.None,
    ),
    RoomConfig(
      name: 'office',
      exhaust: 11,
      flow: Flow(
        correction: 1.1,
        minimum: 10,
        maximum: 80,
        default: 20,
        low: 5,
        medium: 50,
        medium_high: 65,
        high: 90,
        button: 80,
      ),
      motion: Option.None,
      humidity: Option.None,
      co2: Option.None,
      co2_minimum: Option.None,
    ),
    RoomConfig(
      name: 'super_fast',
      exhaust: 15,
      flow: Flow(
        correction: 1.0,
        minimum: 0,
        maximum: 400,
        default: 0,
        low: 40,
        medium: 50,
        medium_high: 65,
        high: 75,
        button: 400,
      ),
      motion: Option.None,
      humidity: Option.None,
      co2: Option.None,
      co2_minimum: Option.None,
    ),
    RoomConfig(
      name: 'bathroom',
      exhaust: 15,
      flow: Flow(
        correction: 1.0,
        minimum: 0,
        maximum: 120,
        default: 10,
        low: 40,
        medium: 50,
        medium_high: 65,
        high: 75,
        button: 120,
      ),
      motion: Option.None,
      humidity: Option.Some('RH bathroom 1'),
      co2: Option.None,
      co2_minimum: Option.None,
    ),
  ]

  state_with_rooms(driver, rooms)
}

fn pub state_with_rooms(
  driver: uni TestDriver,
  rooms: Array[RoomConfig],
) -> State {
  let itho = recover Itho.new(Client.with_driver(driver as Driver))
  let logger = Logger.disabled
  let config = IthoConfig(
    ip: IpAddress.v4(0, 0, 0, 0),
    minimum_flow: 75,
    maximum_flow: 350,
    speed_id: 124,
    manual_id: 111,
    adjust_time: 0,
  )

  let metrics = recover Metrics.new(IpAddress.v4(0, 0, 0, 0), port: 0)
  let state = State.new(itho, logger, metrics, config)

  rooms.into_iter.each(fn (conf) { state.add_room(Room.new(conf.name, conf)) })
  state
}

fn pub allow_api_calls -> uni TestDriver {
  let driver = recover TestDriver.new

  driver.request(
    matches: fn (req) { req.queries.opt('setsetting').some? },
    then: fn (_) { Response.ok('OK'.to_byte_array) },
  )

  driver
}
